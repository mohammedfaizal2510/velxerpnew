.employee-card-style{
    border: 1px solid #ccc;
    padding: 10px;
    margin: 10px;
    margin-bottom: 40px;
    border-radius: 10px;
    /* box-shadow: 30px 30px 60px rgba(0,0,0,0.2); */
    box-shadow: rgba(50, 50, 93, 0.25) 0px 50px 100px -20px, rgba(0, 0, 0, 0.3) 0px 30px 60px -30px, rgba(10, 37, 64, 0.35) 0px -10px 30px 0px inset;
    /* transition: transform 0.3s ease-in-out;
    transform: scale(1); */
    background-color: #f9fbfe;
    /* cursor: pointer; */
    color: #4285F4;
    /* position: relative; */
}


/* Container for the employee table */
.employee-card-style-table table {
    width: 100%;
    border-collapse: collapse;
    margin: 20px 0;
    font-size: 18px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);

}

/* Table headers */
.employee-card-style-table th {
    background-color: #4285F4; /* Green background */
    color: white; /* White text */
    text-align: left;
    padding: 12px 15px;
    font-weight: bold;
}

/* Table data cells */
.employee-card-style-table td {
    padding: 12px 15px;
    color: #333;
    border-bottom: 1px solid #ddd; /* Subtle row borders */
}

/* Alternating row colors */
.employee-card-style-table tr:nth-child(even) {
    background-color: #f2f2f2;
}

/* Hover effect for table rows */
.employee-card-style-table tr:hover {
    background-color: #e1f5fe;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

/* Style for table container */
.employee-card-style-table {
    margin: 30px auto;
    width: 90%;
    max-width: 1200px;
    overflow-x: auto;

}

/* Center the table heading */
.employee-card-style-table h1 {
    text-align: center;
    font-family: 'Arial', sans-serif;
    color: #333;
    margin-bottom: 10px;
}
/* 
.custom-checkbox-style {
    width: 20px;   
    height: 20px;  
  }
   */


   =========================================================================


AlfEachProjectCard.jsx


import React from 'react'
import './AlfProjects.css'
import { faPersonDigging } from '@fortawesome/free-solid-svg-icons'
import { Button } from "react-bootstrap"
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'



const AlfEachProjectCard = ({id, projectName, CityName, supervisorName, projectStartDate, isCompleted, togggleCardStatus, deleteCard}) => {
    



    return (
    <>
        <div className="col-12 col-md-6 mt-3">
            <a>
            </a>
            <div className='project-card p-4'>
                <div style={{display:"flex", gap:"1em"}}>
                    <FontAwesomeIcon icon={faPersonDigging} style={{fontSize:"3em"}}/>
                    <h1>{projectName}</h1>
                </div>
                    <p>City: {CityName}</p>
                    <p>Supervisor : {supervisorName}</p>
                    <p>Start Date: {projectStartDate}</p>
                    <hr></hr>
                    <div>
                        <Button onClick={() => deleteCard(id)}>Remove</Button>
                        {isCompleted? (<Button className='ml-3 btn btn-danger' onClick={() => togggleCardStatus(id)}>Mark UnCompleted</Button>):(<Button className='ml-3' onClick={() => togggleCardStatus(id)}>Mark Completed</Button>)}
                        {/* <Button className='ml-3' onClick={() => togggleCardStatus(id)}>Mark Completed</Button> */}
                        {isCompleted? (<p style={{display:"inline", fontSize:"1.3em"}} className='ml-3 text-success'>completed</p>):(<p style={{display:"inline", fontSize:"1.3em"}} className='ml-3 text-danger'>OnGoing</p>)}
                        {/* <p style={{display:"inline", fontSize:"1.3em"}} className={`ml-3 ${isCompleted ? "text-success" : "text-danger"}`}>OnGoing</p> */}
                    </div>
                        {/* <FontAwesomeIcon icon={faWarehouse} className='services-icon mt-3 mb-3' /> */}
            </div>
        </div>
    </>
  )
}

export default AlfEachProjectCard






========================================================================
AlfProjects.jsx


// to add client name and city in the cadrd
import React, { useEffect, useRef } from 'react'
import {Navbar, Nav, Button, Dropdown, NavDropdown, closeButton} from "react-bootstrap"
import { FormControl, Form } from 'react-bootstrap'
import './AlfProjects.css'
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'
import { faPersonDigging, faPlus } from '@fortawesome/free-solid-svg-icons'
// import Select from "react-select"
import Select from "react-select"



import { useState } from 'react';
import Modal from 'react-bootstrap/Modal';
import AlfEachProjectCard from './AlfEachProjectCard'
import AlfNavbar from './AlfNavbar'


const AlfProjects = () => {
    const superVisorNames = [
        { label: 'supervisor - 1', value: 'supervisor - 1' },
        { label: 'supervisor - 2', value: 'supervisor - 2' },
        { label: 'supervisor - 3', value: 'supervisor - 3' },
        { label: 'supervisor - 4', value: 'supervisor - 4' },
        { label: 'supervisor - 5', value: 'supervisor - 5' },
        { label: 'supervisor - 6', value: 'supervisor - 6' }
    ];
    //navigation starts here
    

    // navigation ends here

    const [show, setShow] = useState(false);

  const handleClose = () => setShow(false);
  const handleShow = () => setShow(true);


  // to get date
  function getDate(){
    const today = new Date.now();
    const month = today.getMonth() + 1;
    const day = today.getDate;
    const year = today.getFullYear();
    return `${month} ${day} ${year}`;
   }


//   const [projectCardDetails, SetProjectCardDetails] = useState(localStorage.getItem('projectCardDetails')?JSON.parse(localStorage.getItem('projectCardDetails')):[]);
const [projectCardDetails, SetProjectCardDetails] = useState(localStorage.getItem('projectDetails')? JSON.parse(localStorage.getItem('projectDetails')):[]);


// update local storage
useEffect(() => {
    localStorage.setItem('projectDetails', JSON.stringify(projectCardDetails));
}, [projectCardDetails])


const projectNameIpRef = useRef();
const projectCityIpRef = useRef();
const projectSupervisorIpRef = useRef();


const addProjectCard = () => {
    const ipProjectName = projectNameIpRef.current.value.trim();
    const ipProjectCity = projectCityIpRef.current.value.trim();
    const ipSupervsorName = projectSupervisorIpRef.current.value.trim();

    if (ipProjectCity==="" || ipProjectName === "" || ipSupervsorName === "") {
        return null;
    }
    const newProjectCard = {
        id: Date.now(),
        projectName: ipProjectName,
        projectCity: ipProjectCity,
        projectSupervisor: ipSupervsorName,
        // projectStartDate: getDate(),
        isCompleted: false,
    }

    SetProjectCardDetails((prev) => [...prev, newProjectCard]);
    projectNameIpRef.current.value = ""
    projectCityIpRef.current.value = "";
    projectSupervisorIpRef.current.value = "";
    handleClose();

};


const togggleCardStatus = (id) => {
    SetProjectCardDetails((prev) =>{
        return prev.map((card) => {
            if(id === card.id) {
                return {...card, isCompleted:!card.isCompleted}
                // card.isCompleted =!card.isCompleted;
            }
            return card;
        })
    })
}


//TO DELETE CARD
const deleteCard = (id) => {
    SetProjectCardDetails((prev) => {
        return prev.filter((card) => card.id!== id);
    })
}










        

return (
    <>
        <AlfNavbar/>

      

        <div className='container-fluid body-bg-color'>
            <div className="row">
                <div className="col-12 text-center">
                    <h1>Projects</h1>
                </div>

                <div className="col-9 search-box" style={{display:"flex"}}>
                        <FormControl type="text" placeholder="Search" className="mr-sm-2" /> 
                </div>

                <div className='col-1'>
                    <Button>Search</Button>
                </div>

                <div className='col-12 col-lg-2'>
                    <Button className='' variant="primary" onClick={handleShow}><FontAwesomeIcon icon={faPlus}/> Create New Project</Button>
                </div>


                {/* <div className='col-12'>
                    <h2>OnGoing Projects</h2>
                </div> */}

                
                    {projectCardDetails.length === 0? (<p>No On Going Projects</p>) : (
                        projectCardDetails.map((eachCardDetails, index) => {
                            return <AlfEachProjectCard 
                            id={eachCardDetails.id}
                            projectName={eachCardDetails.projectName} 
                            CityName={eachCardDetails.projectCity} 
                            supervisorName={eachCardDetails.projectSupervisor}
                            projectStartDate = {eachCardDetails.projectStartDate}
                            isCompleted  = {eachCardDetails.isCompleted}
                            key={index} 
                            togggleCardStatus = {togggleCardStatus}
                            deleteCard = {deleteCard}
                            />
                        })
                    )}
                {/* <AlfEachProjectCard projectName={"Project Name"} CityNam={"City Name"} supervisorName={"Name"} projectStartDate={getDate}/> */}
                
                

                <div className="col-6">
                    <Modal show={show} onHide={handleClose}>
                        <Modal.Header closeButton>
                        <Modal.Title>Creating new Project</Modal.Title>
                        </Modal.Header>
                        <Modal.Body>
                            <label htmlFor='projectNameIp' className='mr-3'>Project Name</label>
                            <input ref={projectNameIpRef} type="text" name="" id="projectNameIp" placeholder='Enter Project Name Here' className='w-100 mb-4'/>

                            <label htmlFor='projectCityIp' className='mr-3'>City</label>
                            <input ref={projectCityIpRef} type="text" name="" id="projectCityIp" placeholder='Enter City Here' className='w-100 mb-4'/>

                            {/* <Dropdown className='d-inline m-2'>
                                <Dropdown.Toggle variant="success" id="dropdown-basic">
                                    Select Supervisor
                                </Dropdown.Toggle>

                                <Dropdown.Menu>
                                    <Dropdown.Item ref={projectSupervisorIpRef} href="" value="supervisor - 1">supervisor - 1</Dropdown.Item>
                                    <Dropdown.Item ref={projectSupervisorIpRef} href="" value="supervisor - 2">supervisor - 2</Dropdown.Item>
                                    <Dropdown.Item ref={projectSupervisorIpRef} href="" value="supervisor - 3">supervisor - 3</Dropdown.Item>
                                    <Dropdown.Item ref={projectSupervisorIpRef} href="" value="supervisor - 4">supervisor - 4</Dropdown.Item>
                                </Dropdown.Menu>
                                </Dropdown> */}

                            <label htmlFor='projectSupervisorIp' className='mr-3'>Supervisor Name</label>
                            <input ref={projectSupervisorIpRef} type="text" name="" id="projectSupervisorIp" placeholder='Enter Supervisor Here' className='w-100 mb-4'/>
                            
                            <label htmlFor=''>Select Supervisor</label>
                            <Select
                                options={superVisorNames}
                            />
                        </Modal.Body>
                        <Modal.Footer>
                        <Button variant="secondary" onClick={handleClose}>
                            Close
                        </Button>
                        <Button variant="primary" onClick={addProjectCard}>
                            Creat Project
                        </Button>
                        </Modal.Footer>
                    </Modal>
                </div>
            </div>
        </div>
    </>
  )
}

export default AlfProjects


// [
//     {
//         id : 1,
//         projectName: "Project - 1",
//         projectCity: "Trichy",
//         projectSupervisor: "Mohammed",
//         //projectStartDate: getDate(),
//         isCompleted: true,

//     },
//     {
//         id : 2,
//         projectName: "Project - 2",
//         projectCity: "perambalur",
//         projectSupervisor: "faizal",
//         //projectStartDate: getDate(),
//         isCompleted: true,

//     }
// ]






========================================================================
AlfProjects.jsx (V2)


import React, { useEffect, useRef } from 'react';
import { Navbar, Nav, Button, Dropdown, NavDropdown, FormControl, Form } from "react-bootstrap";
import './AlfProjects.css';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faPersonDigging, faPlus } from '@fortawesome/free-solid-svg-icons';
import Select from "react-select";

import { useState } from 'react';
import Modal from 'react-bootstrap/Modal';
import AlfEachProjectCard from './AlfEachProjectCard';
import AlfNavbar from './AlfNavbar';

const AlfProjects = () => {
    const superVisorNames = [
        { label: 'supervisor - 1', value: 'supervisor - 1' },
        { label: 'supervisor - 2', value: 'supervisor - 2' },
        { label: 'supervisor - 3', value: 'supervisor - 3' },
        { label: 'supervisor - 4', value: 'supervisor - 4' },
        { label: 'supervisor - 5', value: 'supervisor - 5' },
        { label: 'supervisor - 6', value: 'supervisor - 6' }
    ];

    const [show, setShow] = useState(false);

    const handleClose = () => setShow(false);
    const handleShow = () => setShow(true);

    // Get the current date
    function getDate() {
        const today = new Date();
        const month = today.getMonth() + 1;
        const day = today.getDate();
        const year = today.getFullYear();
        return `${day}/${month}/${year}`;
    }

    const [projectCardDetails, SetProjectCardDetails] = useState(localStorage.getItem('projectDetails') ? JSON.parse(localStorage.getItem('projectDetails')) : []);

    // Update local storage when projectCardDetails changes
    useEffect(() => {
        localStorage.setItem('projectDetails', JSON.stringify(projectCardDetails));
    }, [projectCardDetails]);

    const projectNameIpRef = useRef();
    const projectCityIpRef = useRef();
    const projectSupervisorIpRef = useRef();

    const addProjectCard = () => {
        const ipProjectName = projectNameIpRef.current.value.trim();
        const ipProjectCity = projectCityIpRef.current.value.trim();
        const ipSupervsorName = projectSupervisorIpRef.current.value.trim();

        if (ipProjectCity === "" || ipProjectName === "" || ipSupervsorName === "") {
            return null;
        }
        const newProjectCard = {
            id: Date.now(),
            projectName: ipProjectName,
            projectCity: ipProjectCity,
            projectSupervisor: ipSupervsorName,
            projectStartDate: getDate(),
            isCompleted: false,
        };

        SetProjectCardDetails((prev) => [...prev, newProjectCard]);
        projectNameIpRef.current.value = "";
        projectCityIpRef.current.value = "";
        projectSupervisorIpRef.current.value = "";
        handleClose();
    };

    const togggleCardStatus = (id) => {
        SetProjectCardDetails((prev) => {
            return prev.map((card) => {
                if (id === card.id) {
                    return { ...card, isCompleted: !card.isCompleted };
                }
                return card;
            });
        });
    };

    const deleteCard = (id) => {
        SetProjectCardDetails((prev) => {
            return prev.filter((card) => card.id !== id);
        });
    };

    return (
        <>
            <AlfNavbar />
            <div className='container-fluid body-bg-color'>
                <div className="row">
                    <div className="col-12 text-center">
                        <h1>Projects</h1>
                    </div>

                    <div className="col-9 search-box" style={{ display: "flex" }}>
                        <FormControl type="text" placeholder="Search" className="mr-sm-2" />
                    </div>

                    <div className='col-1'>
                        <Button>Search</Button>
                    </div>

                    <div className='col-12 col-lg-2'>
                        <Button variant="primary" onClick={handleShow}><FontAwesomeIcon icon={faPlus} /> Create New Project</Button>
                    </div>

                    {projectCardDetails.length === 0 ? (
                        <p>No On Going Projects</p>
                    ) : (
                        projectCardDetails.map((eachCardDetails, index) => {
                            return <AlfEachProjectCard
                                id={eachCardDetails.id}
                                projectName={eachCardDetails.projectName}
                                projectCity={eachCardDetails.projectCity}
                                supervisorName={eachCardDetails.projectSupervisor}
                                projectStartDate={eachCardDetails.projectStartDate}
                                isCompleted={eachCardDetails.isCompleted}
                                key={index}
                                togggleCardStatus={togggleCardStatus}
                                deleteCard={deleteCard}
                            />
                        })
                    )}

                    <div className="col-6">
                        <Modal show={show} onHide={handleClose}>
                            <Modal.Header closeButton>
                                <Modal.Title>Creating new Project</Modal.Title>
                            </Modal.Header>
                            <Modal.Body>
                                <label htmlFor='projectNameIp' className='mr-3'>Project Name</label>
                                <input ref={projectNameIpRef} type="text" id="projectNameIp" placeholder='Enter Project Name Here' className='w-100 mb-4' />

                                <label htmlFor='projectCityIp' className='mr-3'>City</label>
                                <input ref={projectCityIpRef} type="text" id="projectCityIp" placeholder='Enter City Here' className='w-100 mb-4' />

                                <label htmlFor='projectSupervisorIp' className='mr-3'>Supervisor Name</label>
                                <input ref={projectSupervisorIpRef} type="text" id="projectSupervisorIp" placeholder='Enter Supervisor Here' className='w-100 mb-4' />

                                <label htmlFor=''>Select Supervisor</label>
                                <Select options={superVisorNames} />
                            </Modal.Body>
                            <Modal.Footer>
                                <Button variant="secondary" onClick={handleClose}>
                                    Close
                                </Button>
                                <Button variant="primary" onClick={addProjectCard}>
                                    Create Project
                                </Button>
                            </Modal.Footer>
                        </Modal>
                    </div>
                </div>
            </div>
        </>
    );
}

export default AlfProjects;


==========================================================================
AlfEachProjectCard.jsx


import React from 'react';
import './AlfProjects.css';
import { faPersonDigging } from '@fortawesome/free-solid-svg-icons';
import { Button } from "react-bootstrap";
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';

const AlfEachProjectCard = ({ id, projectName, projectCity, supervisorName, projectStartDate, isCompleted, togggleCardStatus, deleteCard }) => {
    return (
        <div className="col-12 col-md-6 mt-3">
            <div className='project-card p-4'>
                <div style={{ display: "flex", gap: "1em" }}>
                    <FontAwesomeIcon icon={faPersonDigging} style={{ fontSize: "3em" }} />
                    <h1>{projectName}</h1>
                </div>
                <p>City: {projectCity}</p>
                <p>Supervisor: {supervisorName}</p>
                <p>Start Date: {projectStartDate}</p>
                <hr />
                <div>
                    <Button onClick={() => deleteCard(id)}>Remove</Button>
                    {isCompleted ? (
                        <Button className='ml-3 btn btn-danger' onClick={() => togggleCardStatus(id)}>Mark UnCompleted</Button>
                    ) : (
                        <Button className='ml-3' onClick={() => togggleCardStatus(id)}>Mark Completed</Button>
                    )}
                    {isCompleted ? (
                        <p style={{ display: "inline", fontSize: "1.3em" }} className='ml-3 text-success'>Completed</p>
                    ) : (
                        <p style={{ display: "inline", fontSize: "1.3em" }} className='ml-3 text-danger'>OnGoing</p>
                    )}
                </div>
            </div>
        </div>
    );
}

export default AlfEachProjectCard;
=============================== the above codes are not needed =================================================================




AlfEachAttendance.jsx

import React from 'react'
import { Button, Dropdown, NavDropdown, Modal } from 'react-bootstrap'
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'
import {  faIdCardClip } from '@fortawesome/free-solid-svg-icons'
import { useState } from 'react'
import './AlfAttendance.css'





const AlfEachAttendance = ({id, name, salaryPerShift, isPresent, shiftWorked, totalPay, salaryDate,}) => {

        //PREDSENT BUTTON DISABLE
  const [isDisabled, setIsDisabled] = useState(false);
  const handleClick = () => {
    setIsDisabled(true);
  };


  const [show, setShow] = useState(false);

    const handleClose = () => setShow(false);
    const handleShow = () => setShow(true);


        // const [selectShift, setselectShift] = useState(null); // New state for selected supervisor   
    const shiftOptions = [
        { label: '0.5 Shift', value: 0.5 },
        { label: '1 Shift', value: 1},
        { label: '1.5 Shift', value: 1.5 },
        { label: '2 Shift', value: 2 },
    ];
  return (
    
    <>
      <div className='col-12 col-md-6 mt-3'>
                <div className='employee-card-style p-4'>
                  <h3><FontAwesomeIcon icon={faIdCardClip} className='mr-3'/>{name}</h3> 
                  <div>
                    <Dropdown className='d-inline m-2'>
                      <Dropdown.Toggle variant="success" id="dropdown-basic">
                        Shift
                      </Dropdown.Toggle>
                      <Dropdown.Menu>
                        <Dropdown.Item href="">0.5 Shift</Dropdown.Item>
                        <Dropdown.Item href="">1 Shift</Dropdown.Item>
                        <Dropdown.Item href="">1.5 Shift</Dropdown.Item>
                        <Dropdown.Item href="">2 Shift</Dropdown.Item>
                      </Dropdown.Menu>
                    </Dropdown>

                            {/* <Select
                                    options={shiftOptions}
                                    value={selectShift}
                                    onChange={(selectedOption) => setselectShift(selectedOption)}
                                    placeholder="Select Supervisor"
                                    className='w-100 mb-4'
                                /> */}

                      <Button className='btn btn-success m-2' onClick={handleClick} disabled={isDisabled}>
                      {isDisabled ? "Marked" : "Present"}
                      </Button>
                      {/* <Button className='btn btn-danger m-2'>Absent</Button> */}
                      <Button className='m-2' onClick={handleShow}>Edit Salary</Button>
                      <h4 className='text-success'>salary : {totalPay}</h4>
                  </div>
                </div>
              </div>


              <Modal show={show} onHide={handleClose}>
                            <Modal.Header>
                                <Modal.Title>Edit Salary Per Shift</Modal.Title>
                            </Modal.Header>
                            <Modal.Body>
                                <label htmlFor='ipSalaryId'>Enter the Salary</label> 
                                <input type="text" name="" id="ipSalaryId" />
                            </Modal.Body>
                            <Modal.Footer>
                                <Button variant="secondary" onClick={handleClose}>Close</Button>
                                <Button variant="primary">Change</Button>
                            </Modal.Footer>
                        </Modal>
    </>
  )
}

export default AlfEachAttendance





=================================================
velxerp\src\components\AlfAttendance.jsx

import React from 'react'
import AlfNavbar from './AlfNavbar'
import { FormControl, Form, Button, Dropdown, NavDropdown, Modal } from 'react-bootstrap'
import { useState } from 'react'
import './AlfAttendance.css'
import AlfEachAttendance from './AlfEachAttendance'


const AlfAttendance = () => {
  //FORMATING DATE
  /* const currentDate = new Date(Date.now());

  // // Format the date and time
  // const formattedDate = currentDate.toLocaleDateString('en-US'); // e.g., "10/17/2024"
  // const formattedTime = currentDate.toLocaleTimeString('en-US'); // e.g., "2:45:12 PM"
  */
  const currentDate = new Date(Date.now());
  const day = String(currentDate.getDate()).padStart(2, '0');
  const month = String(currentDate.getMonth() + 1).padStart(2, '0');
  const year = currentDate.getFullYear();
  const formattedDate = `${day}-${month}-${year}`; 
  //FORMATING DATE ENDS



    // const shiftValues = [
    //   {label :"0.5 Shift", value:0.5},
    //   {label :"1.0 Shift", value:1},
    //   {label :"1.5 Shift", value:1.5},
    //   {label :"2 Shift", value:2},
    // ]


    const userAttendanceDetails = [
      {
        id: 101,
        name:"Mohammed",
        salaryPerShift: 700,
        isPresent : false,
        shiftWorked: 0,
        totalPay: 0,
        salaryDate:formattedDate,

      },
      {
        id:102,
        name:"Faizal",
        salaryPerShift: 700,
        isPresent : false,
        shiftWorked: 0,
        totalPay: 0,
        salaryDate:formattedDate,

      }
    ]







  



  


  //EMPLOYEE NAMES
  // const [employeeNames, SetEmployeeNames] = useState(["Faisal", "Ahamad", "nithin", "ashwin", "faizal"]);
  return (
    <>
      <AlfNavbar/>

      {/* <button onClick={handleClick} disabled={isDisabled}>
        {isDisabled ? "Button Disabled" : "Click Me"}
      </button> */}
      {/* <h2>Formatted Date: {formattedDate}</h2> */}
      {/* <h2>Formatted Time: {formattedTime}</h2> */}
      
      <div className='container-fluid'>
        <div className="row">
          <div className="col-12">
            <h1 className='text-center'>Mark Your Attendance Here</h1>
          </div>

          <div className='col-12 text-center'>
            <h3>{formattedDate}</h3>
          </div>

          <div className="col-12" style={{display:"flex", gap:"10px"}}>
            <FormControl type="text" placeholder="Search" className="mr-sm-2" /> 
            <Button>Search</Button>
          </div>

          



          {userAttendanceDetails.length === 0 ? (
            <p>No Employees</p>
          ) : (
            userAttendanceDetails.map((eachEmployee, index) => (
              <AlfEachAttendance
                key={index}
                id={eachEmployee.id}
                name={eachEmployee.name}
                salaryPerShift={eachEmployee.salaryPerShift}
                isPresent={eachEmployee.isPresent}
                shiftWorked={eachEmployee.shiftWorked}
                totalPay={eachEmployee.totalPay}
                salaryDate={eachEmployee.salaryDate}
              />
            ))
          )}
        </div>
      </div>


      
    </>
  )
}

export default AlfAttendance





// <div className='col-12 col-md-6 mt-3'>
//             <div className='employee-card-style p-4'>
//               <h3><FontAwesomeIcon icon={faIdCardClip} className='mr-3'/>{}</h3> 
//               <div>
//                 <Dropdown className='d-inline m-2'>
//                   <Dropdown.Toggle variant="success" id="dropdown-basic">
//                     Shift
//                   </Dropdown.Toggle>

//                   <Dropdown.Menu>
//                     <Dropdown.Item href="">0.5 Shift</Dropdown.Item>
//                     <Dropdown.Item href="">1 Shift</Dropdown.Item>
//                     <Dropdown.Item href="">1.5 Shift</Dropdown.Item>
//                     <Dropdown.Item href="">2 Shift</Dropdown.Item>
//                   </Dropdown.Menu>
//                 </Dropdown>

//                   <Button className='btn btn-success m-2' onClick={handleClick} disabled={isDisabled}>
//                   {isDisabled ? "Marked" : "Present"}
//                   </Button>
//                   {/* <Button className='btn btn-danger m-2'>Absent</Button> */}
//                   <Button className='m-2'>Edit Salary</Button>
//                   <h4 className='text-success'>1,000.00</h4>
//               </div>
//             </div>
//           </div>

=============================== the above codes are not needed =================================================================



---------------------------- ATTENDANCE PAGE START --------------------------------
velxerp\src\components\AlfAttendance.jsx




//=============================================================== 3)

// import React, { useState } from 'react';
// import AlfNavbar from './AlfNavbar';
// import { FormControl, Button, Form } from 'react-bootstrap';
// import DatePicker from 'react-datepicker'; // You may need to install react-datepicker
// import 'react-datepicker/dist/react-datepicker.css';
// import './AlfAttendance.css';
// import AlfEachAttendance from './AlfEachAttendance';

// const AlfAttendance = () => {
//   const [selectedDate, setSelectedDate] = useState(new Date()); // Default to today's date
//   const [searchQuery, setSearchQuery] = useState('');
  
//   const formattedDate = selectedDate.toLocaleDateString('en-GB').replace(/\//g, '-');

//   const [userAttendanceDetails, setUserAttendanceDetails] = useState([
//     {
//       id: 101,
//       name: "Mohammed",
//       salaryPerShift: 700,
//       isPresent: false,
//       shiftWorked: 0,
//       totalPay: 0,
//       salaryDate: formattedDate,
//     },
//     {
//       id: 102,
//       name: "Faizal",
//       salaryPerShift: 700,
//       isPresent: false,
//       shiftWorked: 0,
//       totalPay: 0,
//       salaryDate: formattedDate,
//     }
//   ]);

//   // Update salary date for each employee based on selected date
//   const updatedUserAttendanceDetails = userAttendanceDetails.map((employee) => ({
//     ...employee,
//     salaryDate: formattedDate
//   }));

//   const filteredEmployees = updatedUserAttendanceDetails.filter((employee) =>
//     employee.name.toLowerCase().includes(searchQuery.toLowerCase())
//   );

//   return (
//     <>
//       <AlfNavbar />
//       <div className='container-fluid'>
//         <div className="row">
//           <div className="col-12 text-center">
//             <h1>Mark Your Attendance Here</h1>

//             {/* Date Picker */}
//             <div className="date-picker-container">
//               <h3>Select Date: </h3>
//               <DatePicker
//                 selected={selectedDate}
//                 onChange={(date) => setSelectedDate(date)}
//                 dateFormat="dd-MM-yyyy"
//                 className="date-picker"
//                 maxDate={new Date()} // Prevents selecting future dates
//               />
//             </div>

//             <h3>{formattedDate}</h3>
//           </div>

//           {/* Search and Clear Button */}
//           <div className="col-12 d-flex gap-2">
//             <FormControl
//               type="text"
//               placeholder="Search by employee name"
//               value={searchQuery}
//               onChange={(e) => setSearchQuery(e.target.value)}
//             />
//             <Button onClick={() => setSearchQuery('')}>Clear</Button>
//           </div>

//           {/* Attendance Cards */}
//           {filteredEmployees.length === 0 ? (
//             <p>No Employees Found</p>
//           ) : (
//             filteredEmployees.map((eachEmployee, index) => (
//               <AlfEachAttendance
//                 key={index}
//                 employee={eachEmployee}
//                 setUserAttendanceDetails={setUserAttendanceDetails}
//               />
//             ))
//           )}
//         </div>
//       </div>
//     </>
//   );
// };

// export default AlfAttendance;

//=============================================================== 2)




// import React, { useState } from 'react';
// import AlfNavbar from './AlfNavbar';
// import { FormControl, Button } from 'react-bootstrap';
// import './AlfAttendance.css';
// import AlfEachAttendance from './AlfEachAttendance';

// const AlfAttendance = () => {
//   const currentDate = new Date();
//   const formattedDate = currentDate.toLocaleDateString('en-GB').replace(/\//g, '-');

//   const [userAttendanceDetails, setUserAttendanceDetails] = useState([
//     {
//       id: 101,
//       name: "Mohammed",
//       salaryPerShift: 700,
//       isPresent: false,
//       shiftWorked: 0,
//       totalPay: 0,
//       salaryDate: formattedDate,
//     },
//     {
//       id: 102,
//       name: "Faizal",
//       salaryPerShift: 700,
//       isPresent: false,
//       shiftWorked: 0,
//       totalPay: 0,
//       salaryDate: formattedDate,
//     }
//   ]);

//   const [searchQuery, setSearchQuery] = useState('');

//   // Filter employees based on the search query
//   const filteredEmployees = userAttendanceDetails.filter((employee) =>
//     employee.name.toLowerCase().includes(searchQuery.toLowerCase())
//   );

//   return (
//     <>
//       <AlfNavbar />
//       <div className='container-fluid'>
//         <div className="row">
//           <div className="col-12 text-center">
//             <h1>Mark Your Attendance Here</h1>
//             <h3>{formattedDate}</h3>
//           </div>

//           <div className="col-12 d-flex gap-2">
//             <FormControl
//               type="text"
//               placeholder="Search by employee name"
//               value={searchQuery}
//               onChange={(e) => setSearchQuery(e.target.value)}
//             />
//             <Button onClick={() => setSearchQuery('')}>Clear</Button>
//           </div>

//           {filteredEmployees.length === 0 ? (
//             <p>No Employees Found</p>
//           ) : (
//             filteredEmployees.map((eachEmployee, index) => (
//               <AlfEachAttendance
//                 key={index}
//                 employee={eachEmployee}
//                 setUserAttendanceDetails={setUserAttendanceDetails}
//               />
//             ))
//           )}
//         </div>
//       </div>
//     </>
//   );
// };

// export default AlfAttendance;



//=============================================================== 1)


// import React, { useState } from 'react';
// import AlfNavbar from './AlfNavbar';
// import { FormControl, Button } from 'react-bootstrap';
// import './AlfAttendance.css';
// import AlfEachAttendance from './AlfEachAttendance';

// const AlfAttendance = () => {
//   const currentDate = new Date();
//   const formattedDate = currentDate.toLocaleDateString('en-GB').replace(/\//g, '-');

//   const [userAttendanceDetails, setUserAttendanceDetails] = useState([
//     {
//       id: 101,
//       name: "Mohammed",
//       salaryPerShift: 700,
//       isPresent: false,
//       shiftWorked: 0,
//       totalPay: 0,
//       salaryDate: formattedDate,
//     },
//     {
//       id: 102,
//       name: "Faizal",
//       salaryPerShift: 700,
//       isPresent: false,
//       shiftWorked: 0,
//       totalPay: 0,
//       salaryDate: formattedDate,
//     }
//   ]);

//   return (
//     <>
//       <AlfNavbar />
//       <div className='container-fluid'>
//         <div className="row">
//           <div className="col-12 text-center">
//             <h1>Mark Your Attendance Here</h1>
//             <h3>{formattedDate}</h3>
//           </div>

//           <div className="col-12 d-flex gap-2">
//             <FormControl type="text" placeholder="Search" />
//             <Button>Search</Button>
//           </div>

//           {userAttendanceDetails.length === 0 ? (
//             <p>No Employees</p>
//           ) : (
//             userAttendanceDetails.map((eachEmployee, index) => (
//               <AlfEachAttendance
//                 key={index}
//                 employee={eachEmployee}
//                 setUserAttendanceDetails={setUserAttendanceDetails}
//               />
//             ))
//           )}
//         </div>
//       </div>
//     </>
//   );
// };

// export default AlfAttendance;



velxerp\src\components\AlfEachAttendance.jsx

// //=============================================================== 3)

// import React, { useState } from 'react';
// import { Button, Dropdown, Modal, FormControl } from 'react-bootstrap';
// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
// import { faIdCardClip } from '@fortawesome/free-solid-svg-icons';
// import './AlfAttendance.css';

// const AlfEachAttendance = ({ employee, setUserAttendanceDetails }) => {
//   const { id, name, salaryPerShift, totalPay } = employee;

//   const [isDisabled, setIsDisabled] = useState(false);
//   const [showModal, setShowModal] = useState(false);
//   const [newSalary, setNewSalary] = useState(salaryPerShift);
//   const [selectedShift, setSelectedShift] = useState(1);

//   // Handle Present Button
//   const handlePresent = () => {
//     const updatedPay = newSalary * selectedShift;
//     updateEmployee({ totalPay: updatedPay });
//     setIsDisabled(true);
//   };

//   // Handle updating salary per shift in modal
//   const handleSaveSalary = () => {
//     updateEmployee({ salaryPerShift: newSalary });
//     setShowModal(false);
//   };

//   // Update employee details in parent state
//   const updateEmployee = (updates) => {
//     setUserAttendanceDetails((prevDetails) =>
//       prevDetails.map((emp) =>
//         emp.id === id ? { ...emp, ...updates } : emp
//       )
//     );
//   };

//   return (
//     <>
//       <div className='col-12 col-md-6 mt-3'>
//         <div className='employee-card-style p-4'>
//           <h3>
//             <FontAwesomeIcon icon={faIdCardClip} className='mr-3' />
//             {name}
//           </h3>
//           <div>
//             <Dropdown className='d-inline m-2'>
//               <Dropdown.Toggle variant="success">
//                 Shift
//               </Dropdown.Toggle>
//               <Dropdown.Menu>
//                 {[0.5, 1, 1.5, 2].map((shiftValue, index) => (
//                   <Dropdown.Item
//                     key={index}
//                     onClick={() => setSelectedShift(shiftValue)}
//                   >
//                     {shiftValue} Shift
//                   </Dropdown.Item>
//                 ))}
//               </Dropdown.Menu>
//             </Dropdown>

//             <Button
//               className='btn btn-success m-2'
//               onClick={handlePresent}
//               disabled={isDisabled}
//             >
//               {isDisabled ? "Marked" : "Present"}
//             </Button>
//             <Button className='m-2' onClick={() => setShowModal(true)}>
//               Edit Salary
//             </Button>
//             <h4 className='text-success'>Salary: {totalPay}</h4>
//           </div>
//         </div>
//       </div>

//       <Modal show={showModal} onHide={() => setShowModal(false)}>
//         <Modal.Header>
//           <Modal.Title>Edit Salary Per Shift</Modal.Title>
//         </Modal.Header>
//         <Modal.Body>
//           <FormControl
//             type="number"
//             value={newSalary}
//             onChange={(e) => setNewSalary(Number(e.target.value))}
//             placeholder="Enter new salary per shift"
//           />
//         </Modal.Body>
//         <Modal.Footer>
//           <Button variant="secondary" onClick={() => setShowModal(false)}>Close</Button>
//           <Button variant="primary" onClick={handleSaveSalary}>Save</Button>
//         </Modal.Footer>
//       </Modal>
//     </>
//   );
// };

// export default AlfEachAttendance;
---------------------------- ATTENDANCE PAGE END --------------------------------


---------------------------- PROJECT PAGE START --------------------------------
velxerp\src\components\AlfProjects.jsx


//================================================================================================ 6) enable clear filter
// import React, { useEffect, useRef, useState } from 'react';
// import { Navbar, Nav, Button, Dropdown, NavDropdown, FormControl, Form } from 'react-bootstrap';
// import './AlfProjects.css';
// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
// import { faPersonDigging, faPlus } from '@fortawesome/free-solid-svg-icons';
// import Select from "react-select";
// import Modal from 'react-bootstrap/Modal';
// import AlfEachProjectCard from './AlfEachProjectCard';
// import AlfNavbar from './AlfNavbar';

// const AlfProjects = () => {
//     const superVisorNames = [
//         { label: 'supervisor - 1', value: 'supervisor - 1' },
//         { label: 'supervisor - 2', value: 'supervisor - 2' },
//         { label: 'supervisor - 3', value: 'supervisor - 3' },
//         { label: 'supervisor - 4', value: 'supervisor - 4' },
//         { label: 'supervisor - 5', value: 'supervisor - 5' },
//         { label: 'supervisor - 6', value: 'supervisor - 6' }
//     ];

//     const [show, setShow] = useState(false);
//     const [selectedSupervisor, setSelectedSupervisor] = useState(null);
//     const [selectedCity, setSelectedCity] = useState(null);
//     const [searchQuery, setSearchQuery] = useState("");

//     const handleClose = () => setShow(false);
//     const handleShow = () => setShow(true);

//     function getDate() {
//         const today = new Date();
//         return `${today.getMonth() + 1}/${today.getDate()}/${today.getFullYear()}`;
//     }

//     const [projectCardDetails, SetProjectCardDetails] = useState(
//         localStorage.getItem('projectDetails') ? JSON.parse(localStorage.getItem('projectDetails')) : []
//     );

//     useEffect(() => {
//         localStorage.setItem('projectDetails', JSON.stringify(projectCardDetails));
//     }, [projectCardDetails]);

//     const projectNameIpRef = useRef();
//     const clientNameIpRef = useRef(); 

//     const addProjectCard = () => {
//         const ipProjectName = projectNameIpRef.current.value.trim();
//         const ipClientName = clientNameIpRef.current.value.trim();
        
//         if (ipProjectName === "" || !selectedSupervisor || !selectedCity) {
//             return null;
//         }

//         const newProjectCard = {
//             id: Date.now(),
//             projectName: ipProjectName,
//             projectCity: selectedCity.label,
//             projectStartDate: getDate(),
//             projectSupervisor: selectedSupervisor.label,
//             clientName: ipClientName,
//             isCompleted: false,
//         };

//         SetProjectCardDetails((prev) => [newProjectCard, ...prev]);

//         projectNameIpRef.current.value = "";
//         setSelectedSupervisor(null);
//         setSelectedCity(null);
//         handleClose();
//     };

//     const togggleCardStatus = (id) => {
//         SetProjectCardDetails((prev) =>
//             prev.map((card) => (card.id === id ? { ...card, isCompleted: !card.isCompleted } : card))
//         );
//     };

//     const deleteCard = (id) => {
//         SetProjectCardDetails((prev) => prev.filter((card) => card.id !== id));
//     };

//     const handleSearch = (e) => setSearchQuery(e.target.value.toLowerCase());
//     const clearSupervisorFilter = () => setSelectedSupervisor(null);
//     const clearCityFilter = () => setSelectedCity(null);

//     const cities = [
//         ...new Set(projectCardDetails.map((project) => ({ label: project.projectCity, value: project.projectCity })))
//     ];

//     const filteredProjects = projectCardDetails.filter((project) => {
//         const matchesSearch = project.projectName.toLowerCase().includes(searchQuery);
//         const matchesSupervisor = selectedSupervisor ? project.projectSupervisor === selectedSupervisor.label : true;
//         const matchesCity = selectedCity ? project.projectCity === selectedCity.label : true;
//         return matchesSearch && matchesSupervisor && matchesCity;
//     });

//     return (
//         <>
//             <AlfNavbar />
//             <div className='container-fluid body-bg-color'>
//                 <div className="row">
//                     <div className="col-12 text-center">
//                         <h1>Projects</h1>
//                     </div>

//                     <div className="col-9 search-box" style={{ display: "flex" }}>
//                         <FormControl type="text" placeholder="Search by Project Name" onChange={handleSearch} />
//                     </div>

//                     <div className='col-1'>
//                         <Button onClick={handleSearch}>Search</Button>
//                     </div>

//                     <div className='col-12 col-lg-2'>
//                         <Button variant="primary" onClick={handleShow}>
//                             <FontAwesomeIcon icon={faPlus} /> Create New Project
//                         </Button>
//                     </div>

//                     <div className="col-6">
//                         <Select
//                             options={superVisorNames}
//                             value={selectedSupervisor}
//                             onChange={(option) => setSelectedSupervisor(option)}
//                             placeholder="Filter by Supervisor"
//                             isClearable={true}
//                         />
//                     </div>
//                     <div className="col-6">
//                         <Select
//                             options={cities}
//                             value={selectedCity}
//                             onChange={(option) => setSelectedCity(option)}
//                             placeholder="Filter by City"
//                             isClearable={true}
//                         />
//                     </div>

//                     {filteredProjects.length === 0 ? (
//                         <p>No On Going Projects</p>
//                     ) : (
//                         filteredProjects.map((eachCardDetails) => (
//                             <AlfEachProjectCard
//                                 key={eachCardDetails.id}
//                                 {...eachCardDetails}
//                                 togggleCardStatus={togggleCardStatus}
//                                 deleteCard={deleteCard}
//                             />
//                         ))
//                     )}

//                     <Modal show={show} onHide={handleClose}>
//                         <Modal.Header>
//                             <Modal.Title>Creating new Project</Modal.Title>
//                         </Modal.Header>
//                         <Modal.Body>
//                             <label>Project Name</label>
//                             <input ref={projectNameIpRef} type="text" placeholder='Enter Project Name Here' className='w-100 mb-4' />

                            

//                             <label>Client Name</label>
//                             <input ref={clientNameIpRef} type="text" placeholder='Enter Client Name' className='w-100 mb-4'/>

//                             <label>Select Supervisor</label>
//                             <Select
//                                 options={superVisorNames}
//                                 value={selectedSupervisor}
//                                 onChange={(option) => setSelectedSupervisor(option)}
//                                 placeholder="Select Supervisor"
//                                 className='w-100 mb-4'
//                                 isClearable={true}
//                             />

//                             <label>Select City</label>
//                             <Select
//                                 options={cities}
//                                 value={selectedCity}
//                                 onChange={(option) => setSelectedCity(option)}
//                                 placeholder="Select City"
//                                 className='w-100 mb-4'
//                                 isClearable={true}
//                             />
//                         </Modal.Body>
//                         <Modal.Footer>
//                             <Button variant="secondary" onClick={handleClose}>Close</Button>
//                             <Button variant="primary" onClick={addProjectCard}>Create Project</Button>
//                         </Modal.Footer>
//                     </Modal>
//                 </div>
//             </div>
//         </>
//     );
// };

// export default AlfProjects;


//================================================================================================ 5) enable clear filter
// import React, { useEffect, useRef, useState } from 'react';
// import { Navbar, Nav, Button, FormControl, Form } from 'react-bootstrap';
// import './AlfProjects.css';
// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
// import { faPersonDigging, faPlus } from '@fortawesome/free-solid-svg-icons';
// import Select from "react-select";
// import Modal from 'react-bootstrap/Modal';
// import AlfEachProjectCard from './AlfEachProjectCard';
// import AlfNavbar from './AlfNavbar';

// const AlfProjects = () => {
//     const superVisorNames = [
//         { label: 'supervisor - 1', value: 'supervisor - 1' },
//         { label: 'supervisor - 2', value: 'supervisor - 2' },
//         { label: 'supervisor - 3', value: 'supervisor - 3' },
//         { label: 'supervisor - 4', value: 'supervisor - 4' },
//         { label: 'supervisor - 5', value: 'supervisor - 5' },
//         { label: 'supervisor - 6', value: 'supervisor - 6' }
//     ];

//     const [show, setShow] = useState(false);
//     const [selectedSupervisor, setSelectedSupervisor] = useState(null);
//     const [selectedCity, setSelectedCity] = useState(null);
//     const [searchTerm, setSearchTerm] = useState(''); 
//     const [filterSupervisor, setFilterSupervisor] = useState(null); 
//     const [filterCity, setFilterCity] = useState(null); 

//     const handleClose = () => setShow(false);
//     const handleShow = () => setShow(true);

//     function getDate() {
//         const today = new Date();
//         const month = today.getMonth() + 1;
//         const day = today.getDate();
//         const year = today.getFullYear();
//         return `${month}/${day}/${year}`;
//     }

//     const [projectCardDetails, SetProjectCardDetails] = useState(
//         localStorage.getItem('projectDetails') ? JSON.parse(localStorage.getItem('projectDetails')) : []
//     );

//     // Extract unique cities from project details
//     const cityOptions = Array.from(
//         new Set(projectCardDetails.map(project => project.projectCity))
//     ).map(city => ({ label: city, value: city }));

//     useEffect(() => {
//         localStorage.setItem('projectDetails', JSON.stringify(projectCardDetails));
//     }, [projectCardDetails]);

//     const projectNameIpRef = useRef();
//     const clientNameIpRef = useRef();

//     const addProjectCard = () => {
//         const ipProjectName = projectNameIpRef.current.value.trim();
//         const ipClientName = clientNameIpRef.current.value.trim();
        
//         if (ipProjectName === "" || !selectedSupervisor || !selectedCity) {
//             return null;
//         }

//         const newProjectCard = {
//             id: Date.now(),
//             projectName: ipProjectName,
//             projectCity: selectedCity.label,
//             projectStartDate: getDate(),
//             projectSupervisor: selectedSupervisor.label,
//             clientName: ipClientName,
//             isCompleted: false,
//         };

//         SetProjectCardDetails((prev) => [...prev, newProjectCard]);
//         projectNameIpRef.current.value = "";
//         setSelectedSupervisor(null);
//         setSelectedCity(null);
//         handleClose();
//     };

//     const togggleCardStatus = (id) => {
//         SetProjectCardDetails((prev) => {
//             return prev.map((card) => {
//                 if (id === card.id) {
//                     return { ...card, isCompleted: !card.isCompleted };
//                 }
//                 return card;
//             });
//         });
//     };

//     const deleteCard = (id) => {
//         SetProjectCardDetails((prev) => {
//             return prev.filter((card) => card.id !== id);
//         });
//     };

//     const filteredProjectCards = projectCardDetails.filter((project) => {
//         const matchesSearch = project.projectName.toLowerCase().includes(searchTerm.toLowerCase());
//         const matchesSupervisor = filterSupervisor ? project.projectSupervisor === filterSupervisor.label : true;
//         const matchesCity = filterCity ? project.projectCity === filterCity.label : true;
//         return matchesSearch && matchesSupervisor && matchesCity;
//     });

//     return (
//         <>
//             <AlfNavbar />
//             <div className='container-fluid body-bg-color'>
//                 <div className="row">
//                     <div className="col-12 text-center">
//                         <h1>Projects</h1>
//                     </div>

//                     {/* Search Input */}
//                     <div className="col-9 search-box" style={{ display: "flex" }}>
//                         <FormControl
//                             type="text"
//                             placeholder="Search by Project Name"
//                             className="mr-sm-2"
//                             onChange={(e) => setSearchTerm(e.target.value)}
//                         />
//                     </div>
//                     <div className='col-1'>
//                         <Button>Search</Button>
//                     </div>
//                     {/* Create New Project Button */}
//                     <div className='col-12 col-lg-2'>
//                         <Button variant="primary" onClick={handleShow}>
//                             <FontAwesomeIcon icon={faPlus} /> Create New Project
//                         </Button>
//                     </div>

//                     {/* Supervisor Filter Dropdown */}
//                     <div className="col-6 mt-3">
//                         <Select
//                             options={superVisorNames}
//                             value={filterSupervisor}
//                             onChange={(selectedOption) => setFilterSupervisor(selectedOption)}
//                             placeholder="Filter by Supervisor"
//                             isClearable
//                         />
//                     </div>

//                     {/* City Filter Dropdown 
//                     col-lg-2 mb-3*/}
//                     <div className="col-6 mt-3">
//                         <Select
//                             options={cityOptions}
//                             value={filterCity}
//                             onChange={(selectedOption) => setFilterCity(selectedOption)}
//                             placeholder="Filter by City"
//                             isClearable
//                         />
//                     </div>

                    

//                     {/* Display Project Cards */}
//                     {filteredProjectCards.length === 0 ? (
//                         <p>No Ongoing Projects</p>
//                     ) : (
//                         filteredProjectCards.map((eachCardDetails, index) => (
//                             <AlfEachProjectCard
//                                 key={index}
//                                 id={eachCardDetails.id}
//                                 projectName={eachCardDetails.projectName}
//                                 CityName={eachCardDetails.projectCity}
//                                 supervisorName={eachCardDetails.projectSupervisor}
//                                 projectStartDate={eachCardDetails.projectStartDate}
//                                 clientName={eachCardDetails.clientName}
//                                 isCompleted={eachCardDetails.isCompleted}
//                                 togggleCardStatus={togggleCardStatus}
//                                 deleteCard={deleteCard}
//                             />
//                         ))
//                     )}

//                     {/* Modal for Creating New Project */}
//                     <div className="col-6">
//                         <Modal show={show} onHide={handleClose}>
//                             <Modal.Header>
//                                 <Modal.Title>Creating new Project</Modal.Title>
//                             </Modal.Header>
//                             <Modal.Body>
//                                 <label htmlFor='projectNameIp' className='mr-3'>Project Name</label>
//                                 <input ref={projectNameIpRef} type="text" id="projectNameIp" placeholder='Enter Project Name Here' className='w-100 mb-4' />

//                                 <label htmlFor='clientNameIpId' className='mr-3'>Client Name</label>
//                                 <input ref={clientNameIpRef} type="text" id="clientNameIpId" placeholder='Enter Client Name' className='w-100 mb-4'/>

//                                 <label htmlFor='supervisorSelect' className='mr-3'>Select Supervisor</label>
//                                 <Select
//                                     options={superVisorNames}
//                                     value={selectedSupervisor}
//                                     onChange={(selectedOption) => setSelectedSupervisor(selectedOption)}
//                                     placeholder="Select Supervisor"
//                                     className='w-100 mb-4'
//                                 />

//                                 <label htmlFor='citySelect' className='mr-3'>Select City</label>
//                                 <Select
//                                     options={cityOptions}
//                                     value={selectedCity}
//                                     onChange={(selectedOption) => setSelectedCity(selectedOption)}
//                                     placeholder="Select City"
//                                     className='w-100 mb-4'
//                                 />
//                             </Modal.Body>
//                             <Modal.Footer>
//                                 <Button variant="secondary" onClick={handleClose}>Close</Button>
//                                 <Button variant="primary" onClick={addProjectCard}>Create Project</Button>
//                             </Modal.Footer>
//                         </Modal>
//                     </div>
                    
//                 </div>
//             </div>
//         </>
//     );
// };

// export default AlfProjects;


//================================================================================================ 4) enable city filter
// import React, { useEffect, useRef, useState } from 'react';
// import { Navbar, Nav, Button, FormControl, Form } from 'react-bootstrap';
// import './AlfProjects.css';
// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
// import { faPersonDigging, faPlus } from '@fortawesome/free-solid-svg-icons';
// import Select from "react-select";
// import Modal from 'react-bootstrap/Modal';
// import AlfEachProjectCard from './AlfEachProjectCard';
// import AlfNavbar from './AlfNavbar';

// const AlfProjects = () => {
//     const superVisorNames = [
//         { label: 'supervisor - 1', value: 'supervisor - 1' },
//         { label: 'supervisor - 2', value: 'supervisor - 2' },
//         { label: 'supervisor - 3', value: 'supervisor - 3' },
//         { label: 'supervisor - 4', value: 'supervisor - 4' },
//         { label: 'supervisor - 5', value: 'supervisor - 5' },
//         { label: 'supervisor - 6', value: 'supervisor - 6' }
//     ];

//     const [show, setShow] = useState(false);
//     const [selectedSupervisor, setSelectedSupervisor] = useState(null);
//     const [selectedCity, setSelectedCity] = useState(null);
//     const [searchTerm, setSearchTerm] = useState(''); 
//     const [filterSupervisor, setFilterSupervisor] = useState(null); 
//     const [filterCity, setFilterCity] = useState(null); 

//     const handleClose = () => setShow(false);
//     const handleShow = () => setShow(true);

//     function getDate() {
//         const today = new Date();
//         const month = today.getMonth() + 1;
//         const day = today.getDate();
//         const year = today.getFullYear();
//         return `${month}/${day}/${year}`;
//     }

//     const [projectCardDetails, SetProjectCardDetails] = useState(
//         localStorage.getItem('projectDetails') ? JSON.parse(localStorage.getItem('projectDetails')) : []
//     );

//     // Extract unique cities from project details
//     const cityOptions = Array.from(
//         new Set(projectCardDetails.map(project => project.projectCity))
//     ).map(city => ({ label: city, value: city }));

//     useEffect(() => {
//         localStorage.setItem('projectDetails', JSON.stringify(projectCardDetails));
//     }, [projectCardDetails]);

//     const projectNameIpRef = useRef();
//     const clientNameIpRef = useRef();

//     const addProjectCard = () => {
//         const ipProjectName = projectNameIpRef.current.value.trim();
//         const ipClientName = clientNameIpRef.current.value.trim();
        
//         if (ipProjectName === "" || !selectedSupervisor || !selectedCity) {
//             return null;
//         }

//         const newProjectCard = {
//             id: Date.now(),
//             projectName: ipProjectName,
//             projectCity: selectedCity.label,
//             projectStartDate: getDate(),
//             projectSupervisor: selectedSupervisor.label,
//             clientName: ipClientName,
//             isCompleted: false,
//         };

//         SetProjectCardDetails((prev) => [...prev, newProjectCard]);
//         projectNameIpRef.current.value = "";
//         setSelectedSupervisor(null);
//         setSelectedCity(null);
//         handleClose();
//     };

//     const togggleCardStatus = (id) => {
//         SetProjectCardDetails((prev) => {
//             return prev.map((card) => {
//                 if (id === card.id) {
//                     return { ...card, isCompleted: !card.isCompleted };
//                 }
//                 return card;
//             });
//         });
//     };

//     const deleteCard = (id) => {
//         SetProjectCardDetails((prev) => {
//             return prev.filter((card) => card.id !== id);
//         });
//     };

//     const filteredProjectCards = projectCardDetails.filter((project) => {
//         const matchesSearch = project.projectName.toLowerCase().includes(searchTerm.toLowerCase());
//         const matchesSupervisor = filterSupervisor ? project.projectSupervisor === filterSupervisor.label : true;
//         const matchesCity = filterCity ? project.projectCity === filterCity.label : true;
//         return matchesSearch && matchesSupervisor && matchesCity;
//     });

//     return (
//         <>
//             <AlfNavbar />
//             <div className='container-fluid body-bg-color'>
//                 <div className="row">
//                     <div className="col-12 text-center">
//                         <h1>Projects</h1>
//                     </div>

//                     {/* Search Input */}
//                     <div className="col-9 search-box" style={{ display: "flex" }}>
//                         <FormControl
//                             type="text"
//                             placeholder="Search by Project Name"
//                             className="mr-sm-2"
//                             onChange={(e) => setSearchTerm(e.target.value)}
//                         />
//                     </div>
//                     <div className='col-1'>
//                         <Button>Search</Button>
//                     </div>

//                     {/* Supervisor Filter Dropdown */}
//                     <div className="col-6 col-lg-2 mb-3">
//                         <Select
//                             options={superVisorNames}
//                             value={filterSupervisor}
//                             onChange={(selectedOption) => setFilterSupervisor(selectedOption)}
//                             placeholder="Filter by Supervisor"
//                         />
//                     </div>

//                     {/* City Filter Dropdown */}
//                     <div className="col-6 col-lg-2 mb-3">
//                         <Select
//                             options={cityOptions}
//                             value={filterCity}
//                             onChange={(selectedOption) => setFilterCity(selectedOption)}
//                             placeholder="Filter by City"
//                         />
//                     </div>

//                     {/* Create New Project Button */}
//                     <div className='col-12 col-lg-2'>
//                         <Button variant="primary" onClick={handleShow}>
//                             <FontAwesomeIcon icon={faPlus} /> Create New Project
//                         </Button>
//                     </div>

//                     {/* Display Project Cards */}
//                     {filteredProjectCards.length === 0 ? (
//                         <p>No Ongoing Projects</p>
//                     ) : (
//                         filteredProjectCards.map((eachCardDetails, index) => (
//                             <AlfEachProjectCard
//                                 key={index}
//                                 id={eachCardDetails.id}
//                                 projectName={eachCardDetails.projectName}
//                                 CityName={eachCardDetails.projectCity}
//                                 supervisorName={eachCardDetails.projectSupervisor}
//                                 projectStartDate={eachCardDetails.projectStartDate}
//                                 clientName={eachCardDetails.clientName}
//                                 isCompleted={eachCardDetails.isCompleted}
//                                 togggleCardStatus={togggleCardStatus}
//                                 deleteCard={deleteCard}
//                             />
//                         ))
//                     )}

//                     {/* Modal for Creating New Project */}
//                     <div className="col-6">
//                         <Modal show={show} onHide={handleClose}>
//                             <Modal.Header>
//                                 <Modal.Title>Creating new Project</Modal.Title>
//                             </Modal.Header>
//                             <Modal.Body>
//                                 <label htmlFor='projectNameIp' className='mr-3'>Project Name</label>
//                                 <input ref={projectNameIpRef} type="text" id="projectNameIp" placeholder='Enter Project Name Here' className='w-100 mb-4' />

//                                 <label htmlFor='clientNameIpId' className='mr-3'>Client Name</label>
//                                 <input ref={clientNameIpRef} type="text" id="clientNameIpId" placeholder='Enter Client Name' className='w-100 mb-4'/>

//                                 <label htmlFor='supervisorSelect' className='mr-3'>Select Supervisor</label>
//                                 <Select
//                                     options={superVisorNames}
//                                     value={selectedSupervisor}
//                                     onChange={(selectedOption) => setSelectedSupervisor(selectedOption)}
//                                     placeholder="Select Supervisor"
//                                     className='w-100 mb-4'
//                                 />

//                                 <label htmlFor='citySelect' className='mr-3'>Select City</label>
//                                 <Select
//                                     options={cityOptions}
//                                     value={selectedCity}
//                                     onChange={(selectedOption) => setSelectedCity(selectedOption)}
//                                     placeholder="Select City"
//                                     className='w-100 mb-4'
//                                 />
//                             </Modal.Body>
//                             <Modal.Footer>
//                                 <Button variant="secondary" onClick={handleClose}>Close</Button>
//                                 <Button variant="primary" onClick={addProjectCard}>Create Project</Button>
//                             </Modal.Footer>
//                         </Modal>
//                     </div>
                    
//                 </div>
//             </div>
//         </>
//     );
// };

// export default AlfProjects;


//================================================================================================ 3) enable supervisor filter
// import React, { useEffect, useRef, useState } from 'react';
// import { Navbar, Nav, Button, FormControl, Form } from 'react-bootstrap';
// import './AlfProjects.css';
// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
// import { faPersonDigging, faPlus } from '@fortawesome/free-solid-svg-icons';
// import Select from "react-select";
// import Modal from 'react-bootstrap/Modal';
// import AlfEachProjectCard from './AlfEachProjectCard';
// import AlfNavbar from './AlfNavbar';

// const AlfProjects = () => {
//     const superVisorNames = [
//         { label: 'supervisor - 1', value: 'supervisor - 1' },
//         { label: 'supervisor - 2', value: 'supervisor - 2' },
//         { label: 'supervisor - 3', value: 'supervisor - 3' },
//         { label: 'supervisor - 4', value: 'supervisor - 4' },
//         { label: 'supervisor - 5', value: 'supervisor - 5' },
//         { label: 'supervisor - 6', value: 'supervisor - 6' }
//     ];

//     const [show, setShow] = useState(false);
//     const [selectedSupervisor, setSelectedSupervisor] = useState(null);
//     const [searchTerm, setSearchTerm] = useState(''); // State for search term
//     const [filterSupervisor, setFilterSupervisor] = useState(null); // State for supervisor filter

//     const handleClose = () => setShow(false);
//     const handleShow = () => setShow(true);

//     // To get the current date
//     function getDate() {
//         const today = new Date();
//         const month = today.getMonth() + 1;
//         const day = today.getDate();
//         const year = today.getFullYear();
//         return `${month}/${day}/${year}`;
//     }

//     const [projectCardDetails, SetProjectCardDetails] = useState(
//         localStorage.getItem('projectDetails') ? JSON.parse(localStorage.getItem('projectDetails')) : []
//     );

//     // Update local storage
//     useEffect(() => {
//         localStorage.setItem('projectDetails', JSON.stringify(projectCardDetails));
//     }, [projectCardDetails]);

//     const projectNameIpRef = useRef();
//     const projectCityIpRef = useRef();
//     const clientNameIpRef = useRef(); 

//     const addProjectCard = () => {
//         const ipProjectName = projectNameIpRef.current.value.trim();
//         const ipProjectCity = projectCityIpRef.current.value.trim();
//         const ipClientName = clientNameIpRef.current.value.trim();
        
//         if (ipProjectCity === "" || ipProjectName === "" || !selectedSupervisor) {
//             return null;
//         }

//         const newProjectCard = {
//             id: Date.now(),
//             projectName: ipProjectName,
//             projectCity: ipProjectCity,
//             projectStartDate: getDate(),
//             projectSupervisor: selectedSupervisor.label,
//             clientName: ipClientName,
//             isCompleted: false,
//         };

//         SetProjectCardDetails((prev) => [...prev, newProjectCard]);
//         projectNameIpRef.current.value = "";
//         projectCityIpRef.current.value = "";
//         setSelectedSupervisor(null);
//         handleClose();
//     };

//     const togggleCardStatus = (id) => {
//         SetProjectCardDetails((prev) => {
//             return prev.map((card) => {
//                 if (id === card.id) {
//                     return { ...card, isCompleted: !card.isCompleted };
//                 }
//                 return card;
//             });
//         });
//     };

//     const deleteCard = (id) => {
//         SetProjectCardDetails((prev) => {
//             return prev.filter((card) => card.id !== id);
//         });
//     };

//     // Filter projects based on search term and selected supervisor
//     const filteredProjectCards = projectCardDetails.filter((project) => {
//         const matchesSearch = project.projectName.toLowerCase().includes(searchTerm.toLowerCase());
//         const matchesSupervisor = filterSupervisor ? project.projectSupervisor === filterSupervisor.label : true;
//         return matchesSearch && matchesSupervisor;
//     });

//     return (
//         <>
//             <AlfNavbar />
//             <div className='container-fluid body-bg-color'>
//                 <div className="row">
//                     <div className="col-12 text-center">
//                         <h1>Projects</h1>
//                     </div>

//                     {/* Search Input */}
//                     <div className="col-9 search-box" style={{ display: "flex" }}>
//                         <FormControl
//                             type="text"
//                             placeholder="Search by Project Name"
//                             className="mr-sm-2"
//                             onChange={(e) => setSearchTerm(e.target.value)}
//                         />
//                     </div>
//                     <div className='col-1'>
//                         <Button>Search</Button>
//                     </div>


//                     {/* Create New Project Button */}
//                     <div className='col-12 col-lg-2'>
//                         <Button variant="primary" onClick={handleShow}>
//                             <FontAwesomeIcon icon={faPlus} /> Create New Project
//                         </Button>
//                     </div>

//                     {/* Supervisor Filter Dropdown */}
//                     <div className="col-12">
//                         <Select
//                             options={superVisorNames}
//                             value={filterSupervisor}
//                             onChange={(selectedOption) => setFilterSupervisor(selectedOption)}
//                             placeholder="Filter by Supervisor"
//                         />
//                     </div>

//                     {/* Display Project Cards */}
//                     {filteredProjectCards.length === 0 ? (
//                         <p>No Ongoing Projects</p>
//                     ) : (
//                         filteredProjectCards.map((eachCardDetails, index) => (
//                             <AlfEachProjectCard
//                                 key={index}
//                                 id={eachCardDetails.id}
//                                 projectName={eachCardDetails.projectName}
//                                 CityName={eachCardDetails.projectCity}
//                                 supervisorName={eachCardDetails.projectSupervisor}
//                                 projectStartDate={eachCardDetails.projectStartDate}
//                                 clientName={eachCardDetails.clientName}
//                                 isCompleted={eachCardDetails.isCompleted}
//                                 togggleCardStatus={togggleCardStatus}
//                                 deleteCard={deleteCard}
//                             />
//                         ))
//                     )}

//                     {/* Modal for Creating New Project */}
//                     <div className="col-6">
//                         <Modal show={show} onHide={handleClose}>
//                             <Modal.Header>
//                                 <Modal.Title>Creating new Project</Modal.Title>
//                             </Modal.Header>
//                             <Modal.Body>
//                                 <label htmlFor='projectNameIp' className='mr-3'>Project Name</label>
//                                 <input ref={projectNameIpRef} type="text" id="projectNameIp" placeholder='Enter Project Name Here' className='w-100 mb-4' />

//                                 <label htmlFor='projectCityIp' className='mr-3'>City</label>
//                                 <input ref={projectCityIpRef} type="text" id="projectCityIp" placeholder='Enter City Here' className='w-100 mb-4' />

//                                 <label htmlFor='clientNameIpId' className='mr-3'>Client Name</label>
//                                 <input ref={clientNameIpRef} type="text" id="clientNameIpId" placeholder='Enter Client Name' className='w-100 mb-4'/>

//                                 <label htmlFor='supervisorSelect' className='mr-3'>Select Supervisor</label>
//                                 <Select
//                                     options={superVisorNames}
//                                     value={selectedSupervisor}
//                                     onChange={(selectedOption) => setSelectedSupervisor(selectedOption)}
//                                     placeholder="Select Supervisor"
//                                     className='w-100 mb-4'
//                                 />
//                             </Modal.Body>
//                             <Modal.Footer>
//                                 <Button variant="secondary" onClick={handleClose}>Close</Button>
//                                 <Button variant="primary" onClick={addProjectCard}>Create Project</Button>
//                             </Modal.Footer>
//                         </Modal>
//                     </div>
                    
//                 </div>
//             </div>
//         </>
//     );
// };

// export default AlfProjects;



//================================================================================================ 2) enable search


// import React, { useEffect, useRef, useState } from 'react';
// import { Navbar, Nav, Button, Dropdown, NavDropdown, FormControl, Form } from 'react-bootstrap';
// import './AlfProjects.css';
// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
// import { faPersonDigging, faPlus } from '@fortawesome/free-solid-svg-icons';
// import Select from "react-select";
// import Modal from 'react-bootstrap/Modal';
// import AlfEachProjectCard from './AlfEachProjectCard';
// import AlfNavbar from './AlfNavbar';

// const AlfProjects = () => {
//     const superVisorNames = [
//         { label: 'supervisor - 1', value: 'supervisor - 1' },
//         { label: 'supervisor - 2', value: 'supervisor - 2' },
//         { label: 'supervisor - 3', value: 'supervisor - 3' },
//         { label: 'supervisor - 4', value: 'supervisor - 4' },
//         { label: 'supervisor - 5', value: 'supervisor - 5' },
//         { label: 'supervisor - 6', value: 'supervisor - 6' }
//     ];

//     const [show, setShow] = useState(false);
//     const [selectedSupervisor, setSelectedSupervisor] = useState(null);
//     const [searchTerm, setSearchTerm] = useState(""); // New state for search term

//     const handleClose = () => setShow(false);
//     const handleShow = () => setShow(true);

//     // To get the current date
//     function getDate() {
//         const today = new Date();
//         const month = today.getMonth() + 1;
//         const day = today.getDate();
//         const year = today.getFullYear();
//         return `${month}/${day}/${year}`;
//     }

//     const [projectCardDetails, setProjectCardDetails] = useState(
//         localStorage.getItem('projectDetails') ? JSON.parse(localStorage.getItem('projectDetails')) : []
//     );

//     // Update local storage
//     useEffect(() => {
//         localStorage.setItem('projectDetails', JSON.stringify(projectCardDetails));
//     }, [projectCardDetails]);

//     const projectNameIpRef = useRef();
//     const projectCityIpRef = useRef();
//     const clientNameIpRef = useRef(); 

//     const addProjectCard = () => {
//         const ipProjectName = projectNameIpRef.current.value.trim();
//         const ipProjectCity = projectCityIpRef.current.value.trim();
//         const ipClientName = clientNameIpRef.current.value.trim();
        
//         if (ipProjectCity === "" || ipProjectName === "" || !selectedSupervisor) {
//             return null;
//         }

//         const newProjectCard = {
//             id: Date.now(),
//             projectName: ipProjectName,
//             projectCity: ipProjectCity,
//             projectStartDate: getDate(),
//             projectSupervisor: selectedSupervisor.label,
//             clientName: ipClientName,
//             isCompleted: false,
//         };

//         setProjectCardDetails((prev) => [...prev, newProjectCard]);
//         projectNameIpRef.current.value = "";
//         projectCityIpRef.current.value = "";
//         setSelectedSupervisor(null);
//         handleClose();
//     };

//     const togggleCardStatus = (id) => {
//         setProjectCardDetails((prev) => {
//             return prev.map((card) => {
//                 if (id === card.id) {
//                     return { ...card, isCompleted: !card.isCompleted };
//                 }
//                 return card;
//             });
//         });
//     };

//     const deleteCard = (id) => {
//         setProjectCardDetails((prev) => {
//             return prev.filter((card) => card.id !== id);
//         });
//     };

//     // Filtered project cards based on the search term
//     const filteredProjectCards = projectCardDetails.filter((card) =>
//         card.projectName.toLowerCase().includes(searchTerm.toLowerCase())
//     );

//     return (
//         <>
//             <AlfNavbar />
//             <div className='container-fluid body-bg-color'>
//                 <div className="row">
//                     <div className="col-12 text-center">
//                         <h1>Projects</h1>
//                     </div>

//                     <div className="col-9 search-box" style={{ display: "flex" }}>
//                         <FormControl
//                             type="text"
//                             placeholder="Search by Project Name"
//                             className="mr-sm-2"
//                             value={searchTerm}
//                             onChange={(e) => setSearchTerm(e.target.value)} // Update search term on input change
//                         />
//                     </div>

//                     <div className='col-1'>
//                         <Button onClick={() => setSearchTerm(searchTerm)}>Search</Button> {/* Trigger search */}
//                     </div>

//                     <div className='col-12 col-lg-2'>
//                         <Button variant="primary" onClick={handleShow}>
//                             <FontAwesomeIcon icon={faPlus} /> Create New Project
//                         </Button>
//                     </div>

//                     {filteredProjectCards.length === 0 ? (
//                         <p>No Matching Projects</p>
//                     ) : (
//                         filteredProjectCards.map((eachCardDetails, index) => (
//                             <AlfEachProjectCard
//                                 key={index}
//                                 id={eachCardDetails.id}
//                                 projectName={eachCardDetails.projectName}
//                                 CityName={eachCardDetails.projectCity}
//                                 supervisorName={eachCardDetails.projectSupervisor}
//                                 projectStartDate={eachCardDetails.projectStartDate}
//                                 clientName={eachCardDetails.clientName}
//                                 isCompleted={eachCardDetails.isCompleted}
//                                 togggleCardStatus={togggleCardStatus}
//                                 deleteCard={deleteCard}
//                             />
//                         ))
//                     )}

//                     <div className="col-6">
//                         <Modal show={show} onHide={handleClose}>
//                             <Modal.Header>
//                                 <Modal.Title>Creating new Project</Modal.Title>
//                             </Modal.Header>
//                             <Modal.Body>
//                                 <label htmlFor='projectNameIp' className='mr-3'>Project Name</label>
//                                 <input ref={projectNameIpRef} type="text" id="projectNameIp" placeholder='Enter Project Name Here' className='w-100 mb-4' />

//                                 <label htmlFor='projectCityIp' className='mr-3'>City</label>
//                                 <input ref={projectCityIpRef} type="text" id="projectCityIp" placeholder='Enter City Here' className='w-100 mb-4' />

//                                 <label htmlFor='clientNameIpId' className='mr-3'>Client Name</label>
//                                 <input ref={clientNameIpRef} type="text" id="clientNameIpId" placeholder='Enter Client Name' className='w-100 mb-4'/>

//                                 <label htmlFor='supervisorSelect' className='mr-3'>Select Supervisor</label>
//                                 <Select
//                                     options={superVisorNames}
//                                     value={selectedSupervisor}
//                                     onChange={(selectedOption) => setSelectedSupervisor(selectedOption)}
//                                     placeholder="Select Supervisor"
//                                     className='w-100 mb-4'
//                                 />
//                             </Modal.Body>
//                             <Modal.Footer>
//                                 <Button variant="secondary" onClick={handleClose}>Close</Button>
//                                 <Button variant="primary" onClick={addProjectCard}>Create Project</Button>
//                             </Modal.Footer>
//                         </Modal>
                        
//                     </div>
                    
//                 </div>
//             </div>
//         </>
//     );
// };

// export default AlfProjects;

//================================================================================================ 1)

// import React, { useEffect, useRef, useState } from 'react';
// import { Navbar, Nav, Button, Dropdown, NavDropdown, FormControl, Form } from 'react-bootstrap';
// import './AlfProjects.css';
// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
// import { faPersonDigging, faPlus } from '@fortawesome/free-solid-svg-icons';
// import Select from "react-select";
// import Modal from 'react-bootstrap/Modal';
// import AlfEachProjectCard from './AlfEachProjectCard';
// import AlfNavbar from './AlfNavbar';

// const AlfProjects = () => {
//     const superVisorNames = [
//         { label: 'supervisor - 1', value: 'supervisor - 1' },
//         { label: 'supervisor - 2', value: 'supervisor - 2' },
//         { label: 'supervisor - 3', value: 'supervisor - 3' },
//         { label: 'supervisor - 4', value: 'supervisor - 4' },
//         { label: 'supervisor - 5', value: 'supervisor - 5' },
//         { label: 'supervisor - 6', value: 'supervisor - 6' }
//     ];

//     const [show, setShow] = useState(false);
//     const [selectedSupervisor, setSelectedSupervisor] = useState(null); // New state for selected supervisor

//     const handleClose = () => setShow(false);
//     const handleShow = () => setShow(true);

//     // To get the current date
//     function getDate() {
//         const today = new Date();
//         const month = today.getMonth() + 1;
//         const day = today.getDate();
//         const year = today.getFullYear();
//         return `${month}/${day}/${year}`;
//     }

//     const [projectCardDetails, SetProjectCardDetails] = useState(
//         localStorage.getItem('projectDetails') ? JSON.parse(localStorage.getItem('projectDetails')) : []
//     );

//     // Update local storage
//     useEffect(() => {
//         localStorage.setItem('projectDetails', JSON.stringify(projectCardDetails));
//     }, [projectCardDetails]);

//     const projectNameIpRef = useRef();
//     const projectCityIpRef = useRef();
//     const clientNameIpRef = useRef(); 

//     const addProjectCard = () => {
//         const ipProjectName = projectNameIpRef.current.value.trim();
//         const ipProjectCity = projectCityIpRef.current.value.trim();
//         const ipClientName = clientNameIpRef.current.value.trim();
        
//         if (ipProjectCity === "" || ipProjectName === "" || !selectedSupervisor) {
//             return null;
//         }

//         const newProjectCard = {
//             id: Date.now(),
//             projectName: ipProjectName,
//             projectCity: ipProjectCity,
//             projectStartDate: getDate(), // Get current date
//             projectSupervisor: selectedSupervisor.label, // Set supervisor name from dropdown
//             clientName: ipClientName, // Set client name from input field
//             isCompleted: false,
//         };

//         SetProjectCardDetails((prev) => [...prev, newProjectCard]);
//         projectNameIpRef.current.value = "";
//         projectCityIpRef.current.value = "";
//         setSelectedSupervisor(null); // Reset supervisor selection
//         handleClose();
//     };

//     const togggleCardStatus = (id) => {
//         SetProjectCardDetails((prev) => {
//             return prev.map((card) => {
//                 if (id === card.id) {
//                     return { ...card, isCompleted: !card.isCompleted };
//                 }
//                 return card;
//             });
//         });
//     };

//     const deleteCard = (id) => {
//         SetProjectCardDetails((prev) => {
//             return prev.filter((card) => card.id !== id);
//         });
//     };

//     return (
//         <>
//             <AlfNavbar />
//             <div className='container-fluid body-bg-color'>
//                 <div className="row">
//                     <div className="col-12 text-center">
//                         <h1>Projects</h1>
//                     </div>

//                     <div className="col-9 search-box" style={{ display: "flex" }}>
//                         <FormControl type="text" placeholder="Search" className="mr-sm-2" />
//                     </div>

//                     <div className='col-1'>
//                         <Button>Search</Button>
//                     </div>

//                     <div className='col-12 col-lg-2'>
//                         <Button variant="primary" onClick={handleShow}>
//                             <FontAwesomeIcon icon={faPlus} /> Create New Project
//                         </Button>
//                     </div>

//                     {projectCardDetails.length === 0 ? (
//                         <p>No On Going Projects</p>
//                     ) : (
//                         projectCardDetails.map((eachCardDetails, index) => (
//                             <AlfEachProjectCard
//                                 key={index}
//                                 id={eachCardDetails.id}
//                                 projectName={eachCardDetails.projectName}
//                                 CityName={eachCardDetails.projectCity}
//                                 supervisorName={eachCardDetails.projectSupervisor}
//                                 projectStartDate={eachCardDetails.projectStartDate}
//                                 clientName={eachCardDetails.clientName}
//                                 isCompleted={eachCardDetails.isCompleted}
//                                 togggleCardStatus={togggleCardStatus}
//                                 deleteCard={deleteCard}
//                             />
//                         ))
//                     )}

//                     <div className="col-6">
//                         <Modal show={show} onHide={handleClose}>
//                             <Modal.Header>
//                                 <Modal.Title>Creating new Project</Modal.Title>
//                             </Modal.Header>
//                             <Modal.Body>
//                                 <label htmlFor='projectNameIp' className='mr-3'>Project Name</label>
//                                 <input ref={projectNameIpRef} type="text" id="projectNameIp" placeholder='Enter Project Name Here' className='w-100 mb-4' />

//                                 <label htmlFor='projectCityIp' className='mr-3'>City</label>
//                                 <input ref={projectCityIpRef} type="text" id="projectCityIp" placeholder='Enter City Here' className='w-100 mb-4' />

//                                 <label htmlFor='clientNameIpId' className='mr-3'>Client Name</label>
//                                 <input ref={clientNameIpRef} type="text" id="clientNameIpId" placeholder='Enter Client Name' className='w-100 mb-4'/>

//                                 <label htmlFor='supervisorSelect' className='mr-3'>Select Supervisor</label>
//                                 <Select
//                                     options={superVisorNames}
//                                     value={selectedSupervisor}
//                                     onChange={(selectedOption) => setSelectedSupervisor(selectedOption)}
//                                     placeholder="Select Supervisor"
//                                     className='w-100 mb-4'
//                                 />
//                             </Modal.Body>
//                             <Modal.Footer>
//                                 <Button variant="secondary" onClick={handleClose}>Close</Button>
//                                 <Button variant="primary" onClick={addProjectCard}>Create Project</Button>
//                             </Modal.Footer>
//                         </Modal>
                        
//                     </div>
                    
//                 </div>
//             </div>
//         </>
//     );
// };

// export default AlfProjects;


velxerp\src\components\AlfEachProjectCard.jsx
//================================================================================================ 6) enable clear filter
// import React from 'react';
// import './AlfProjects.css';
// import { faPersonDigging } from '@fortawesome/free-solid-svg-icons';
// import { Button } from "react-bootstrap";
// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';

// const AlfEachProjectCard = ({ id, projectName, CityName, supervisorName, projectStartDate, isCompleted, togggleCardStatus, deleteCard, clientName }) => {
//     return (
//         <>
//             <div className="col-12 col-md-6 mt-3">
//                 <div className='project-card p-4'>
//                     <div style={{ display: "flex", gap: "1em" }}>
//                         <FontAwesomeIcon icon={faPersonDigging} style={{ fontSize: "3em" }} />
//                         <h1>{projectName}</h1>
//                     </div>
//                     <p>City: {CityName}</p>
//                     <p>Supervisor: {supervisorName}</p>
//                     <p>Start Date: {projectStartDate}</p>
//                     <p>Client: {clientName}</p>
//                     <hr />
//                     <div>
//                         <Button onClick={() => deleteCard(id)}>Remove</Button>
//                         {isCompleted ? (
//                             <Button className='ml-3 btn btn-danger' onClick={() => togggleCardStatus(id)}>Mark UnCompleted</Button>
//                         ) : (
//                             <Button className='ml-3' onClick={() => togggleCardStatus(id)}>Mark Completed</Button>
//                         )}
//                         {isCompleted ? (
//                             <p style={{ display: "inline", fontSize: "1.3em" }} className='ml-3 text-success'>Completed</p>
//                         ) : (
//                             <p style={{ display: "inline", fontSize: "1.3em" }} className='ml-3 text-danger'>OnGoing</p>
//                         )}
//                     </div>
//                 </div>
//             </div>
//         </>
//     );
// };

// export default AlfEachProjectCard;


---------------------------- PROJECT PAGE END --------------------------------

---------------------------- SIDE NAV PAGE START --------------------------------


//============= 4) good functioning
// import React, { useState } from "react";
// import "@trendmicro/react-sidenav/dist/react-sidenav.css";
// import SideNav, { NavItem, NavIcon, NavText } from "@trendmicro/react-sidenav";
// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
// import { faEnvelope, faListCheck, faScrewdriverWrench, faUsers, faUser, faSignOutAlt } from '@fortawesome/free-solid-svg-icons';
// import { useNavigate } from 'react-router-dom';

// const TrySideNav = () => {
//   const [isVisible, setIsVisible] = useState(true);
//   const navigate = useNavigate();

//   const handleNavigate = (path) => {
//     navigate(path);
//   };

//   const handleLogout = () => {
//     // Add your logout logic here
//     console.log("Logging out...");
//     navigate('/login');
//   };

//   return (
//     <div style={{ position: 'fixed', top: 0, left: 0, height: '100vh', zIndex: 1000 }}>

    
//       <SideNav expanded={isVisible} style={{ height: '100%' }}>
//         <SideNav.Toggle onClick={() => setIsVisible(!isVisible)} />
//         <SideNav.Nav defaultSelected="projects">
//           <NavItem eventKey="projects" onClick={() => handleNavigate('/projects/dashboard')}>
//             <NavIcon>
//               <FontAwesomeIcon icon={faListCheck} style={{ fontSize: "1.75em" }} />
//             </NavIcon>
//             <NavText>Projects</NavText>
//           </NavItem>
//           <NavItem eventKey="employees" onClick={() => handleNavigate('/projects/Employees')}>
//             <NavIcon>
//               <FontAwesomeIcon icon={faUsers} style={{ fontSize: "1.75em" }} />
//             </NavIcon>
//             <NavText>Employees</NavText>
//           </NavItem>
//           <NavItem eventKey="inventory" onClick={() => handleNavigate('/projects/inventory')}>
//             <NavIcon>
//               <FontAwesomeIcon icon={faScrewdriverWrench} style={{ fontSize: "1.75em" }} />
//             </NavIcon>
//             <NavText>Inventory</NavText>
//           </NavItem>
//           <NavItem eventKey="inbox" onClick={() => handleNavigate('/projects/inbox')}>
//             <NavIcon>
//               <FontAwesomeIcon icon={faEnvelope} style={{ fontSize: "1.75em" }} />
//             </NavIcon>
//             <NavText>Inbox</NavText>
//           </NavItem>

        

//           {/* <NavItem eventKey="profile" onClick={() => handleNavigate('/user/profile')}>
//             <NavIcon>
//               <FontAwesomeIcon icon={faUser} style={{ fontSize: "1.75em" }} />
//             </NavIcon>
//             <NavText>User Profile</NavText>
//           </NavItem> */}
//           <NavItem eventKey="logout" onClick={handleLogout}>
//             <NavIcon>
//               <FontAwesomeIcon icon={faSignOutAlt} style={{ fontSize: "1.75em" }} />
//             </NavIcon>
//             <NavText>Logout</NavText>
//           </NavItem>
//         </SideNav.Nav>
//       </SideNav>
//     </div>
//   );
// };

// export default TrySideNav;


//========================3) navigate complete =========================
// import React, { useState } from "react";
// import "@trendmicro/react-sidenav/dist/react-sidenav.css";
// import SideNav, { NavItem, NavIcon, NavText } from "@trendmicro/react-sidenav";
// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
// import { faEnvelope, faListCheck, faScrewdriverWrench, faUsers } from '@fortawesome/free-solid-svg-icons';
// import { useNavigate } from 'react-router-dom';

// const TrySideNav = () => {
//   const [isVisible, setIsVisible] = useState(true);
//   const navigate = useNavigate();

//   const handleNavigate = (path) => {
//     navigate(path);
//   };

//   return (
//     <SideNav expanded={isVisible}>
//       <SideNav.Toggle onClick={() => setIsVisible(!isVisible)} />
//       <SideNav.Nav defaultSelected="projects">
//         <NavItem eventKey="projects" onClick={() => navigate('/projects/dashboard')}>
//           <NavIcon>
//             <FontAwesomeIcon icon={faListCheck} style={{ fontSize: "1.75em" }} />
//           </NavIcon>
//           <NavText>Projects</NavText>
//         </NavItem>
//         <NavItem eventKey="employees" onClick={() => handleNavigate('/projects/Employees')}>
//           <NavIcon>
//             <FontAwesomeIcon icon={faUsers} style={{ fontSize: "1.75em" }} />
//           </NavIcon>
//           <NavText>Employees</NavText>
//         </NavItem>
//         <NavItem eventKey="inventory" onClick={() => navigate('/projects/inventry')}>
//           <NavIcon>
//             <FontAwesomeIcon icon={faScrewdriverWrench} style={{ fontSize: "1.75em" }} />
//           </NavIcon>
//           <NavText>Inventory</NavText>
//         </NavItem>
//         <NavItem eventKey="inbox" onClick={() => navigate('/projects/inbox')}>
//           <NavIcon>
//             <FontAwesomeIcon icon={faEnvelope} style={{ fontSize: "1.75em" }} />
//           </NavIcon>
//           <NavText>Inbox</NavText>
//         </NavItem>
//       </SideNav.Nav>
//     </SideNav>
//   );
// };

// export default TrySideNav;


//======================== 2) react-router-dom
// import React from "react";
// import "@trendmicro/react-sidenav/dist/react-sidenav.css";
// import SideNav, { NavItem, NavIcon, NavText } from "@trendmicro/react-sidenav";
// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
// import { faEnvelope, faListCheck, faScrewdriverWrench, faUsers } from '@fortawesome/free-solid-svg-icons';
// import { withRouter } from 'react-router-dom';

// class TrySideNav extends React.Component {
//   constructor(props) {
//     super(props);
//     this.state = {
//       isVisible: true
//     };
//   }

//   handleNavigate = (path) => {
//     this.props.history.push(path);
//   }

//   render() {
//     return (
//       <SideNav expanded={this.state.isVisible}>
//         <SideNav.Toggle
//           onClick={() => {
//             this.setState({ isVisible: !this.state.isVisible });
//           }}
//         />
//         <SideNav.Nav defaultSelected="projects">
//           <NavItem eventKey="projects">
//             <NavIcon>
//               <FontAwesomeIcon icon={faListCheck} style={{ fontSize: "1.75em" }}/>
//             </NavIcon>
//             <NavText>Projects</NavText>
//           </NavItem>
//           <NavItem eventKey="employees" onClick={() => this.handleNavigate('/projects/Employees')}>
//             <NavIcon>
//               <FontAwesomeIcon icon={faUsers} style={{ fontSize: "1.75em" }}/>
//             </NavIcon>
//             <NavText>Employees</NavText>
//           </NavItem>
//           <NavItem eventKey="inventory">
//             <NavIcon>
//               <FontAwesomeIcon icon={faScrewdriverWrench} style={{ fontSize: "1.75em" }}/>
//             </NavIcon>
//             <NavText>Inventory</NavText>
//           </NavItem>
//           <NavItem eventKey="inbox">
//             <NavIcon>
//               <FontAwesomeIcon icon={faEnvelope} style={{ fontSize: "1.75em" }}/>
//             </NavIcon>
//             <NavText>Inbox</NavText>
//           </NavItem>
//         </SideNav.Nav>
//       </SideNav>
//     );
//   }
// }

// export default withRouter(TrySideNav);

//=================================== 1) 
// import React from "react";
// import "@trendmicro/react-sidenav/dist/react-sidenav.css";
// import SideNav, { Toggle, Nav, NavItem, NavIcon, NavText } from "@trendmicro/react-sidenav";
// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
// import { faEnvelope, faListCheck, faPersonDigging, faPlus, faScrewdriverWrench, faUsers } from '@fortawesome/free-solid-svg-icons';
// import { useNavigate } from 'react-router-dom'

// // import SideNav, {
// //   Toggle,
// //   Nav,
// //   NavItem,
// //   NavIcon,
// //   NavText
// // } from "@trendmicro/react-sidenav";
// const navigate = useNavigate();

// class TrySideNav extends React.Component {
//   constructor(props) {
//     super(props);
//     this.state = {
//       isVisible: true
//     };
//   }

//   render() {
    
//     return (
      
//       <SideNav expanded={this.state.isVisible}>
//         <SideNav.Toggle
//           onClick={() => {
//             this.setState({ isVisible: !this.state.isVisible });
//           }}
//         />
//         <SideNav.Nav defaultSelected="projects">
//           <NavItem eventKey="projects" >
//             <NavIcon>
//               <FontAwesomeIcon icon={faListCheck} style={{ fontSize: "1.75em" }}/>
//             </NavIcon>
//             <NavText>Projects</NavText>
//           </NavItem>
//           <NavItem eventKey="placed orders" onClick={() => navigate('/projects/Employees')}>
//             <NavIcon>
//             <FontAwesomeIcon icon={faUsers} style={{ fontSize: "1.75em" }}/>
//             </NavIcon>
//             <NavText>Employees</NavText>
//           </NavItem>
//           <NavItem eventKey="inventry ">
//             <NavIcon>
//             <FontAwesomeIcon icon={faScrewdriverWrench} style={{ fontSize: "1.75em" }}/>
//             </NavIcon>
//             <NavText>Inventry</NavText>
//           </NavItem>
//           <NavItem eventKey="inbox">
//             <NavIcon>
//             <FontAwesomeIcon icon={faEnvelope} style={{ fontSize: "1.75em" }}/>
//             </NavIcon>
//             <NavText>Inbox</NavText>
//           </NavItem>
//         </SideNav.Nav>
//       </SideNav>
//     );
//   }
// }

// export default TrySideNav;



---------------------------- SIDE NAV PAGE END --------------------------------


---------------------------- EMPLOYEE LIST START --------------------------------
AlfEmployeesList.jsx


//======================= 3) filters
// import React, { useState } from 'react';
// import AlfNavbar from './AlfNavbar';
// import { Button, FormControl, Dropdown } from 'react-bootstrap';
// import './AlfAttendance.css';
// import AlfEachEmployeeList from './AlfEachEmployeeList';
// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
// import { faPlus } from '@fortawesome/free-solid-svg-icons';
// import Modal from 'react-bootstrap/Modal';

// const AlfEmployeesList = () => {
//   const [show, setShow] = useState(false);
//   const [searchName, setSearchName] = useState('');
//   const [searchPhone, setSearchPhone] = useState('');
//   const [selectedDesignation, setSelectedDesignation] = useState('');
//   const [sortOrder, setSortOrder] = useState('');

//   const handleClose = () => setShow(false);
//   const handleShow = () => setShow(true);

//   const employeeDetails = [
//     { id: 101, name: 'John Doe', designation: 'Labour', salaryPerShift: 700, phoneNumber: '1234567890' },
//     { id: 102, name: 'Jane Smith', designation: 'Electrician', salaryPerShift: 800, phoneNumber: '1258796403' },
//     { id: 103, name: 'Alice Brown', designation: 'Plumber', salaryPerShift: 750, phoneNumber: '5369785214' },
//     { id: 104, name: 'Mike Johnson', designation: 'Supervisor', salaryPerShift: 900, phoneNumber: '7894523654' },
//     { id: 105, name: 'Emily Davis', designation: 'Plumber', salaryPerShift: 700, phoneNumber: '7895612348' },

//   ];

//   // Filtering employees based on search inputs and dropdown selections
//   const filteredEmployees = employeeDetails
//     .filter(employee =>
//       employee.name.toLowerCase().includes(searchName.toLowerCase()) &&
//       employee.phoneNumber.includes(searchPhone) &&
//       (selectedDesignation ? employee.designation === selectedDesignation : true)
//     )
//     .sort((a, b) => {
//       if (sortOrder === 'asc') return a.salaryPerShift - b.salaryPerShift;
//       if (sortOrder === 'desc') return b.salaryPerShift - a.salaryPerShift;
//       return 0;
//     });

//   // Get unique designations for dropdown
//   const uniqueDesignations = [...new Set(employeeDetails.map(emp => emp.designation))];

//   return (
//     <div>
//       <AlfNavbar />
//       <div className='container-fluid'>
//         <div className='row'>
//           <div className='col-12 text-center'>
//             <h1>List of All Employees</h1>
//           </div>

//           {/* Search by Name */}
//           <div className='col-12 col-md-3'>
//             <FormControl
//               type='text'
//               placeholder='Search by Name'
//               value={searchName}
//               onChange={(e) => setSearchName(e.target.value)}
//             />
//           </div>

//           {/* Search by Phone Number */}
//           <div className='col-12 col-md-3'>
//             <FormControl
//               type='text'
//               placeholder='Search by Phone Number'
//               value={searchPhone}
//               onChange={(e) => setSearchPhone(e.target.value)}
//             />
//           </div>

//           {/* Filter by Designation */}
//           <div className='col-12 col-md-2'>
//             <Dropdown>
//               <Dropdown.Toggle variant='primary'>
//                 {selectedDesignation || 'Filter by Designation'}
//               </Dropdown.Toggle>
//               <Dropdown.Menu>
//                 <Dropdown.Item onClick={() => setSelectedDesignation('')}>All</Dropdown.Item>
//                 {uniqueDesignations.map((designation, index) => (
//                   <Dropdown.Item key={index} onClick={() => setSelectedDesignation(designation)}>
//                     {designation}
//                   </Dropdown.Item>
//                 ))}
//               </Dropdown.Menu>
//             </Dropdown>
//           </div>

//           {/* Sort by Salary */}
//           <div className='col-12 col-md-2'>
//             <Dropdown>
//               <Dropdown.Toggle variant='primary'>Sort by Salary</Dropdown.Toggle>
//               <Dropdown.Menu>
//                 <Dropdown.Item onClick={() => setSortOrder('asc')}>Ascending</Dropdown.Item>
//                 <Dropdown.Item onClick={() => setSortOrder('desc')}>Descending</Dropdown.Item>
//               </Dropdown.Menu>
//             </Dropdown>
//           </div>

//           {/* Modal to create a new employee */}
//           <div className='col-12 col-md-2'>
//             <Button variant='primary' onClick={handleShow}>
//               <FontAwesomeIcon icon={faPlus} /> Create New Employee
//             </Button>
//           </div>
//         </div>
//       </div>

//           {/* Table displaying employee data */}
//           <div className='col-12 employee-card-style mt-4'>
//             <table>
//               <thead>
//                 <tr>
//                   <th>ID</th>
//                   <th>Name</th>
//                   <th>Designation</th>
//                   <th>Salary Per Shift</th>
//                   <th>Phone Number</th>
//                 </tr>
//               </thead>
//               <tbody>
//                 {filteredEmployees.map((employee) => (
//                   <tr key={employee.id}>
//                     <AlfEachEmployeeList
//                       empId={employee.id}
//                       empName={employee.name}
//                       empDesignation={employee.designation}
//                       empSalaryPerShift={employee.salaryPerShift}
//                       empPhNo={employee.phoneNumber}
//                     />
//                   </tr>
//                 ))}
//               </tbody>
//             </table>
//           </div>

          

//       {/* Modal for creating a new employee */}
//       <Modal show={show} onHide={handleClose}>
//         <Modal.Header closeButton>
//           <Modal.Title>Create New Employee</Modal.Title>
//         </Modal.Header>
//         <Modal.Body>
//           <label>Enter Name</label>
//           {/* Additional fields for creating a new employee can be added here */}
//         </Modal.Body>
//         <Modal.Footer>
//           <Button variant='secondary' onClick={handleClose}>
//             Close
//           </Button>
//           <Button variant='primary' onClick={handleClose}>
//             Save Changes
//           </Button>
//         </Modal.Footer>
//       </Modal>
//     </div>
//   );
// };

// export default AlfEmployeesList;


// ================ 2) table style

// import React, { useState } from 'react';
// import AlfNavbar from './AlfNavbar';
// import { Button, FormControl, Modal } from 'react-bootstrap';
// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
// import { faPlus } from '@fortawesome/free-solid-svg-icons';
// import AlfEachEmployeeList from './AlfEachEmployeeList';
// import './AlfAttendance.css';

// const AlfEmployeesList = () => {
//     const [show, setShow] = useState(false);
//     const handleClose = () => setShow(false);
//     const handleShow = () => setShow(true);

//     const employeeDetails = [
//         {
//             id: 101,
//             name: 'name 1',
//             designation: 'labour',
//             salaryPerShift: 700,
//             phoneNumber: '1234567890'
//         },
//         {
//             id: 102,
//             name: 'name 2',
//             designation: 'electrician',
//             salaryPerShift: 700,
//             phoneNumber: '1258796403'
//         },
//         {
//             id: 103,
//             name: 'name 3',
//             designation: 'plumber',
//             salaryPerShift: 700,
//             phoneNumber: '5369785214'
//         },
//         {
//             id: 104,
//             name: 'name 4',
//             designation: 'supervisor',
//             salaryPerShift: 700,
//             phoneNumber: '7894523654'
//         },
//         {
//             id: 105,
//             name: 'name 5',
//             designation: 'plumber',
//             salaryPerShift: 700,
//             phoneNumber: '7895612348'
//         }
//     ];

//     return (
//         <div>
//             <AlfNavbar />
//             <div className='container-fluid'>
//                 <div className="row">
//                     <div className="col-12 text-center">
//                         <h1>List Of All Employees</h1>
//                     </div>

//                     <div className="col-9 search-box" style={{ display: "flex" }}>
//                         <FormControl type="text" placeholder="Search" className="mr-sm-2" />
//                     </div>

//                     <div className='col-1'>
//                         <Button>Search</Button>
//                     </div>

//                     <div className='col-12 col-lg-2'>
//                         <Button variant="primary" onClick={handleShow}>
//                             <FontAwesomeIcon icon={faPlus} /> Create New Employee
//                         </Button>
//                     </div>

//                     <div className='col-12 employee-card-style'>
//                         <table>
//                             <thead>
//                                 <tr>
//                                     <th>ID</th>
//                                     <th>Name</th>
//                                     <th>Designation</th>
//                                     <th>Salary Per Shift</th>
//                                     <th>Phone Number</th>
//                                 </tr>
//                             </thead>
//                             <tbody>
//                                 {employeeDetails.map(employee => (
//                                     <tr key={employee.id}>
//                                         <AlfEachEmployeeList
//                                             empId={employee.id}
//                                             empName={employee.name}
//                                             empDesignation={employee.designation}
//                                             empSalaryPerShift={employee.salaryPerShift}
//                                             empPhNo={employee.phoneNumber}
//                                         />
//                                     </tr>
//                                 ))}
//                             </tbody>
//                         </table>
//                     </div>

//                     <div className="col-6">
//                         <Modal show={show} onHide={handleClose}>
//                             <Modal.Header closeButton>
//                                 <Modal.Title>Modal heading</Modal.Title>
//                             </Modal.Header>
//                             <Modal.Body>
//                                 <label>Enter Name</label>
//                             </Modal.Body>
//                             <Modal.Footer>
//                                 <Button variant="secondary" onClick={handleClose}>
//                                     Close
//                                 </Button>
//                                 <Button variant="primary" onClick={handleClose}>
//                                     Save Changes
//                                 </Button>
//                             </Modal.Footer>
//                         </Modal>
//                     </div>
//                 </div>
//             </div>
//         </div>
//     );
// };

// export default AlfEmployeesList;


// import React from 'react'
// import AlfNavbar from './AlfNavbar'
// import { Navbar, Nav, Button, Dropdown, NavDropdown, FormControl, Form } from 'react-bootstrap';
// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
// import { faPlus } from '@fortawesome/free-solid-svg-icons';
// import Modal from 'react-bootstrap/Modal';
// import { useState } from 'react';
// import './AlfAttendance.css'


// const AlfEmployeesList = () => {
//     const [show, setShow] = useState(false);

//   const handleClose = () => setShow(false);
//   const handleShow = () => setShow(true);


//     // const availabeResignations = [
//     //     { label: 'resignation - 1', value: 'resignation - 1' },
//     //     { label: 'resignation - 2', value: 'resignation - 2' },
//     //     { label: 'resignation - 3', value: 'resignation - 3' },
//     //     { label: 'resignation - 4', value: 'resignation - 4' },
//     //     { label: 'resignation - 5', value: 'resignation - 5' },
//     //     { label: 'resignation - 6', value: 'resignation - 6' }
//     // ];

//     // const employeeDetails = [
//     //     {
//     //         id: Date.now(),
//     //         name: 'John Doe',
//     //         designation: 'Software Engineer',
//     //         salaryPerShift : 700,
//     //         phoneNumber: '1234567890'
//     //     }
//     //     // supervisor
//     //     // labour
//     //     // engineer
//     //     // masson
//     //     // electrition
//     //     // plumber
//     // ]

//      const employeeDetails = [
//         {
//             id: 101,
//             name: 'name 1',
//             designation: 'labour',
//             salaryPerShift : 700,
//             phoneNumber: '1234567890'
//         },
//         {
//             id: 102,
//             name: 'name 2',
//             designation: 'electrition',
//             salaryPerShift : 700,
//             phoneNumber: '1258796403'
//         },
//         {
//             id: 103,
//             name: 'name 3',
//             designation: 'plumber',
//             salaryPerShift : 700,
//             phoneNumber: '5369785214'
//         },
//         {
//             id: 104 ,
//             name: 'name 4',
//             designation: 'supevisor',
//             salaryPerShift : 700,
//             phoneNumber: '7894523654'
//         },
//         {
//             id: 105,
//             name: 'name 5',
//             designation: 'plumber',
//             salaryPerShift : 700,
//             phoneNumber: '7895612348'
//         }
//      ]

    



//   return (
//     <div>
//         <AlfNavbar/>
//         <div className='container-fluid'>
//             <div className="row">
//                 <div className="col-12 text-center">
//                     <h1>List Of All Employees</h1>
//                 </div>

//                 <div className="col-9 search-box" style={{ display: "flex" }}>
//                         <FormControl type="text" placeholder="Search" className="mr-sm-2" />
//                 </div>

//                 <div className='col-1'>
//                         <Button>Search</Button>
//                 </div>

//                 <div className='col-12 col-lg-2'>
//                     <Button variant="primary" onClick={handleShow}>
//                         <FontAwesomeIcon icon={faPlus} /> Create New Employee
//                     </Button>
//                 </div>


//                 {/* <div className='col-12 employee-card-style'>
//                     <h1>Employee Id : {employeeDetails[0].id}</h1>
//                     <h1>Employee Name : {employeeDetails[0].name}</h1>
//                     <h1>Employee Designation : {employeeDetails[0].designation}</h1>
//                     <h1>Salary Per Shift : {employeeDetails[0].salaryPerShift}</h1>
//                     <h1>Phone Number : {employeeDetails[0].phoneNumber}</h1>
//                     <Button variant="primary">Edit</Button>
//                     <Button variant="danger">Resign</Button>
//                     <Button variant="success">Attendance</Button>
//                     <Button variant="info">Salary</Button>
//                     <Button variant="warning">Leave</Button> 
//                     <Button variant="danger">Delete</Button>
                    
//                 </div> */}


//                 <div className='col-12 employee-card-style'>
//                     <table>
//                         <thead>
//                             <tr>
//                                 <th>ID</th>
//                                 <th>Name</th>
//                                 <th>Designation</th>
//                                 <th>Salary Per Shift</th>
//                                 <th>Phone Number</th>
//                             </tr>
//                         </thead>
//                         <tbody>
//                             <tr>
//                             <AlfEmployeesList
//                             empId = {employeeDetails[0].employeeId}
//                             empName = {employeeDetails[0].name}
//                             empDesignation = {employeeDetails[0].designation}
//                             empSalaryPerShift = {employeeDetails[0].salaryPerShift}
//                             empPhNo = {employeeDetails[0].phoneNumber}
//                             />
//                             </tr>
//                         </tbody>
//                     </table>
//                 </div>

//                 <div className="col-6">
//                     <Modal show={show} onHide={handleClose}>
//                         <Modal.Header closeButton>
//                         <Modal.Title>Modal heading</Modal.Title>
//                         </Modal.Header>
//                         <Modal.Body>
//                             <label>Enter Name</label>
                            
//                         </Modal.Body>
//                         <Modal.Footer>
//                         <Button variant="secondary" onClick={handleClose}>
//                             Close
//                         </Button>
//                         <Button variant="primary" onClick={handleClose}>
//                             Save Changes
//                         </Button>
//                         </Modal.Footer>
//                     </Modal>
//                 </div>
//             </div>


//         </div>
        
//     </div>
//   )
// }

// export default AlfEmployeesList
---------------------------- EMPLOYEE LIST END --------------------------------



---------------------------- ATTENDANCE PAGE START --------------------------------

AlfAttendance.jsx


// =========================2) adding employee from modal
// import React, { useState, useEffect } from 'react';
// import { FormControl, Button, Container, Row, Col, Modal, Dropdown } from 'react-bootstrap';
// import DatePicker from 'react-datepicker';
// import 'react-datepicker/dist/react-datepicker.css';
// import AlfEachAttendance from './AlfEachAttendance';
// import PinSideNav from './PinSideNav';
// import PinNavihation from './PinNavihation';

// const AlfAttendance = () => {
//   const currentDate = new Date();
//   const [selectedDate, setSelectedDate] = useState(currentDate);
//   const [searchTerm, setSearchTerm] = useState("");
//   const [totalSalaryPaid, setTotalSalaryPaid] = useState(0);
//   const [userAttendanceDetails, setUserAttendanceDetails] = useState(
//     JSON.parse(localStorage.getItem('userAttendanceDetails'))
//   );
//   const [show, setShow] = useState(false);
//   const [selectedEmployee, setSelectedEmployee] = useState(null);

//   const employeeDetails = JSON.parse(localStorage.getItem('employeeDetails'));
//   const formattedDate = selectedDate.toLocaleDateString('en-GB'); 

//   // Load from localStorage on mount
//   useEffect(() => {
//     const storedDetails = JSON.parse(localStorage.getItem('userAttendanceDetails'));
//     if (storedDetails) setUserAttendanceDetails(storedDetails);
//   }, []);

//   // Save to localStorage whenever userAttendanceDetails updates
//   useEffect(() => {
//     localStorage.setItem('userAttendanceDetails', JSON.stringify(userAttendanceDetails));
//     const total = userAttendanceDetails.reduce((sum, employee) => sum + employee.totalPay, 0);
//     setTotalSalaryPaid(total);
//   }, [userAttendanceDetails]);

//   // Function to handle search
//   const handleSearch = () => {
//     return userAttendanceDetails.filter((employee) =>
//       employee.name.toLowerCase().includes(searchTerm.toLowerCase())
//     );
//   };

//   const handleClose = () => setShow(false);
//   const handleShow = () => setShow(true);

//   const addEmployee = () => {
//     if (selectedEmployee) {
//       const employee = employeeDetails.find(emp => emp.id === selectedEmployee);
//       if (employee) {
//         setUserAttendanceDetails(prevDetails => [
//           ...prevDetails,
//           {
//             id: employee.id,
//             name: employee.name,
//             salaryPerShift: employee.salaryPerShift,
//             isPresent: false,
//             shiftWorked: 0,
//             totalPay: 0,
//             salaryDate: formattedDate,
//           },
//         ]);
//       }
//       setShow(false);
//       setSelectedEmployee(null);
//     }
//   };

//   return (
//     <>
//       <Container fluid>
//         <Row>
//           <Col xs={1}>
//             <PinSideNav selectedKey="attendance" />
//           </Col>
//           <Col xs={11}>
//             <PinNavihation />
//             <div className='container-fluid mt-5'>
//               <div className="row">
//                 <div className="col-12 text-center">
//                   <h1 className='mb-3'>Mark Your Attendance Here</h1>
//                   <h3 className='d-inline pr-3'>Select The Date :</h3>
//                   <div className="date-picker-container d-inline mb-3">
//                     <DatePicker
//                       selected={selectedDate}
//                       onChange={(date) => setSelectedDate(date)}
//                       dateFormat="dd-MM-yyyy"
//                       className="date-picker"
//                       maxDate={new Date()}
//                     />
//                   </div>
//                 </div>

//                 <div className='col-12 text-center mb-3' style={{ display: "flex", gap: "10px" }}>
//                   <FormControl type="text" placeholder="Search by name" onChange={(e) => setSearchTerm(e.target.value)} />
//                   <Button onClick={handleSearch}>Search</Button>
//                   <Button variant="primary" onClick={handleShow}>Add Employee</Button>
//                 </div>

//                 {handleSearch().length === 0 ? (
//                   <p>No Employees Found</p>
//                 ) : (
//                   handleSearch().map((eachEmployee, index) => (
//                     <AlfEachAttendance
//                       key={index}
//                       {...eachEmployee}
//                       setUserAttendanceDetails={setUserAttendanceDetails}
//                     />
//                   ))
//                 )}

//                 <Modal show={show} onHide={handleClose}>
//                   <Modal.Header>
//                     <Modal.Title>Add Employee to Attendance</Modal.Title>
//                   </Modal.Header>
//                   <Modal.Body>
//                     <Dropdown onSelect={(e) => setSelectedEmployee(Number(e))}>
//                       <Dropdown.Toggle variant="success" id="dropdown-basic">
//                         Select Employee
//                       </Dropdown.Toggle>
//                       <Dropdown.Menu>
//                         {employeeDetails.map((employee) => (
//                           <Dropdown.Item key={employee.id} eventKey={employee.id}>
//                             {employee.name} (ID: {employee.id})
//                           </Dropdown.Item>
//                         ))}
//                       </Dropdown.Menu>
//                     </Dropdown>
//                   </Modal.Body>
//                   <Modal.Footer>
//                     <Button variant="secondary" onClick={handleClose}>Close</Button>
//                     <Button variant="primary" onClick={addEmployee}>Add</Button>
//                   </Modal.Footer>
//                 </Modal>
//               </div>
//             </div>
//           </Col> 
//         </Row>
//       </Container>
//     </>
//   )
// }

// export default AlfAttendance;



// =========================1) while adding employee
// import React, { useState, useEffect } from 'react'
// import AlfNavbar from './AlfNavbar'
// import { FormControl, Form, Button, Container, Row, Col , Modal} from 'react-bootstrap'
// import DatePicker from 'react-datepicker'
// import 'react-datepicker/dist/react-datepicker.css'
// import '../css/AlfAttendance.css'
// import AlfEachAttendance from './AlfEachAttendance'
// import PinNavbar from './PinNavbar'
// import PinSideNav from './PinSideNav'
// import PinNavihation from './PinNavihation'

// const AlfAttendance = () => {
//   const currentDate = new Date();
//   const [selectedDate, setSelectedDate] = useState(currentDate);
//   const [searchTerm, setSearchTerm] = useState("");
//   const [totalSalaryPaid, setTotalSalaryPaid] = useState(0);
//   //user attendance details 
//   const [userAttendanceDetails, setUserAttendanceDetails] = useState([]);
  
//   const formattedDate = selectedDate.toLocaleDateString('en-GB'); 

//   const employeeDetails = JSON.parse(localStorage.getItem('employeeDetails'));
//   // console.log(employeeDetails);
//   // now employeeDetails will be given below
//    // { id: 101, name: 'name 1', designation: 'Labour', salaryPerShift: 700, phoneNumber: '1234567890', totalSalary: 15000, doj:"", workingInSite:false,accessPrevAttendance: false, accessAddEmployee: false, accessEditSalary: false },
//   // { id: 102, name: 'name 2', designation: 'Electrician', salaryPerShift: 800, phoneNumber: '1258796403', totalSalary: 0,doj:"", workingInSite:false, accessPrevAttendance: false, accessAddEmployee: false, accessEditSalary: false },
//   // { id: 103, name: 'name 3', designation: 'Plumber', salaryPerShift: 750, phoneNumber: '5369785214', totalSalary: 7000,doj:"", workingInSite:false, accessPrevAttendance: false, accessAddEmployee: false, accessEditSalary: false },
//   // { id: 104, name: 'name 4', designation: 'Supervisor', salaryPerShift: 900, phoneNumber: '7894523654', totalSalary: 0,doj:"", workingInSite:false, accessPrevAttendance: false, accessAddEmployee: false, accessEditSalary: false },
//   // { id: 105, name: 'name 5', designation: 'Plumber', salaryPerShift: 700, phoneNumber: '7895612348', totalSalary: 10000,doj:"", workingInSite:false, accessPrevAttendance: false, accessAddEmployee: false, accessEditSalary: false },

//   const [siteSalaryDataset, setSiteSalaryDataset] = useState();

//   // const [userAttendanceDetails, setUserAttendanceDetails] = useState([
//   //   {
//   //     id: employeeDetails[0].id,
//   //     name: employeeDetails[0].name,
//   //     salaryPerShift: 700,
//   //     isPresent: false,
//   //     shiftWorked: 0,
//   //     totalPay: 0,
//   //     salaryDate: formattedDate,
//   //   },
//   //   {
//   //     id: employeeDetails[1].id,
//   //     name: employeeDetails[1].name,
//   //     salaryPerShift: 700,
//   //     isPresent: false,
//   //     shiftWorked: 0,
//   //     totalPay: 0,
//   //     salaryDate: formattedDate,
//   //   }
//   // ]);
//   console.log(userAttendanceDetails);

//   // Calculate total salary paid whenever attendance details are updated
//   useEffect(() => {
//     const total = userAttendanceDetails.reduce((sum, employee) => sum + employee.totalPay, 0);
//     setTotalSalaryPaid(total);
//   }, [userAttendanceDetails]);

//   // Function to handle search
//   const handleSearch = () => {
//     return userAttendanceDetails.filter((employee) => employee.name.toLowerCase().includes(searchTerm.toLowerCase()));
//   };

//   //for add employee modal
//   const [show, setShow] = useState(false);
//   const handleClose = () => setShow(false);
//   const [selectedEmployee, setSelectedEmployee] = useState(null);

  

//   return (
//     <>
//       {/* <AlfNavbar /> */}
//       {/* <PinNavbar/> */}
//       <Container fluid>
//         <Row>
//           <Col xs={1}>
//             <PinSideNav selectedKey = "attendance"/>
//           </Col>
//           <Col xs={11}>
//           <PinNavihation />
//           <div className='container-fluid mt-5'>
//             <div className="row">
//               <div className="col-12 text-center">
//                 <h1 className='mb-3'>Mark Your Attendance Here</h1>
//                 <h3 className='d-inline pr-3'>Select The Date :</h3>
//                 {/* <DatePicker 
//                 selected={selectedDate} 
//                 onChange={(date) => setSelectedDate(  date)} className='mb-2'/> */}
//                   {/* Date Picker */}
//                 <div className="date-picker-container d-inline mb-3">
//                   <DatePicker
//                     selected={selectedDate}
//                     onChange={(date) => setSelectedDate(date)}
//                     dateFormat="dd-MM-yyyy"
//                     className="date-picker"
//                     maxDate={new Date()}
//                   />
//                 </div>
//                 {/* <h3 className='mb-3'>{formattedDate}</h3> */}
//                 {/* <h4 className='mt-3'>Total Salary : ₹{totalSalaryPaid}</h4> */}
//               </div>

//               <div className='col-12 text-center mb-3' style={{ display: "flex", gap: "10px" }}>
//                 <FormControl type="text" placeholder="Search by name" onChange={(e) => setSearchTerm(e.target.value)} />
//                 <Button onClick={handleSearch}>Search</Button>
//                 <Button variant="primary" onClick={() => setShow(true)}>Add Employee</Button>
//               </div>

//               {handleSearch().length === 0 ? (
//                 <p>No Employees Found</p>
//               ) : (
//                 handleSearch().map((eachEmployee, index) => (
//                   <AlfEachAttendance
//                     key={index}
//                     id={eachEmployee.id}
//                     name={eachEmployee.name}
//                     salaryPerShift={eachEmployee.salaryPerShift}
//                     isPresent={eachEmployee.isPresent}
//                     shiftWorked={eachEmployee.shiftWorked}
//                     totalPay={eachEmployee.totalPay}
//                     salaryDate={eachEmployee.salaryDate}
//                     setUserAttendanceDetails={setUserAttendanceDetails}
//                   />
//                 ))
//               )}

//               <div className="col-12">

//               <Modal show={show} onHide={handleClose}>
//                 <Modal.Header>
//                   <Modal.Title>Add Employees Available to this Site</Modal.Title>
//                 </Modal.Header>
//                 <Modal.Body>
//                           {/* list here all the availabe employees name and salary per shift from "employeeDetails" dataset 
//                           if "employeeDetails.workingInSite" is true then the employee should not be able to select to this site to add the employee
//                           if "employeeDetails.workingInSite" is false then the employee should be able to select to this site to add the employee
//                           at the top of this modal show the filter for "designation" which shows all the available designation from the "employeeDetails" dataset and based on the designation the employee name ans salarypershift should be listed to select
//                           then on clicking add button in the modal will call AlfEachAttendance and create the card to mark the attendance 
//                            */}

//                 </Modal.Body>
//                 <Modal.Footer>
//                   <Button variant="secondary" onClick={handleClose}>Close</Button>
//                   <Button variant="primary" onClick={handleClose}>Add</Button>
//                 </Modal.Footer>
//               </Modal> 
//               </div>
//             </div>
//           </div>
//           </Col> 
//         </Row>
//       </Container>
      
      
//     </>
//   )
// }

// export default AlfAttendance


velxerp\src\components\AlfEachAttendance.jsx


//===================== 2) correct code before updating the "totalSalary"
// import React, { useState } from 'react'
// import { Button, Dropdown, Modal } from 'react-bootstrap'
// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'
// import { faIdCardClip } from '@fortawesome/free-solid-svg-icons'

// const AlfEachAttendance = ({ id, name, salaryPerShift, isPresent, shiftWorked, totalPay, salaryDate, setUserAttendanceDetails }) => {
//   const [isDisabled, setIsDisabled] = useState(false);
//   const [show, setShow] = useState(false);
//   const [newSalary, setNewSalary] = useState(salaryPerShift);
//   const [selectedShift, setSelectedShift] = useState(0);

//   const handleClose = () => setShow(false);
//   const handleShow = () => setShow(true);

//   const handleShiftSelect = (shiftValue) => {
//     setSelectedShift(shiftValue);
//   };

//   const handleSalaryUpdate = () => {
//     setUserAttendanceDetails(prevDetails => prevDetails.map(employee =>
//       employee.id === id ? { ...employee, salaryPerShift: newSalary } : employee
//     ));
//     setShow(false);
//   };

//   const handleMarkPresent = () => {
//     const updatedTotalPay = newSalary * selectedShift;
//     setUserAttendanceDetails(prevDetails => prevDetails.map(employee =>
//       employee.id === id ? { ...employee, isPresent: true, totalPay: updatedTotalPay } : employee
//     ));
//     setIsDisabled(true);
//   };

//   return (
//     <>
//       <div className='col-12 col-md-6 mt-3'>
//         <div className='employee-card-style p-4'>
//           <h3><FontAwesomeIcon icon={faIdCardClip} className='mr-3'/>{name}</h3> 
//           <div>
//             <Dropdown className='d-inline m-2' onSelect={handleShiftSelect}>
//               <Dropdown.Toggle variant="success" id="dropdown-basic">
//                 Shift
//               </Dropdown.Toggle>
//               <Dropdown.Menu>
//                 <Dropdown.Item eventKey={0.5}>0.5 Shift</Dropdown.Item>
//                 <Dropdown.Item eventKey={1}>1 Shift</Dropdown.Item>
//                 <Dropdown.Item eventKey={1.5}>1.5 Shift</Dropdown.Item>
//                 <Dropdown.Item eventKey={2}>2 Shift</Dropdown.Item>
//               </Dropdown.Menu>
//             </Dropdown>

//             <Button className='btn btn-success m-2' onClick={handleMarkPresent} disabled={isDisabled}>
//               {isDisabled ? "Marked" : "Present"}
//             </Button>
//             <Button className='m-2' onClick={handleShow}>Edit Salary</Button>
//             <h4 className='text-success'>Salary: ₹{totalPay}</h4>
//           </div>
//         </div>
//       </div>

//       <Modal show={show} onHide={handleClose}>
//         <Modal.Header>
//           <Modal.Title>Edit Salary Per Shift</Modal.Title>
//         </Modal.Header> 
//         <Modal.Body>
//           <input type="number" value={newSalary} onChange={(e) => setNewSalary(Number(e.target.value))} />
//         </Modal.Body>
//         <Modal.Footer>
//           <Button variant="secondary" onClick={handleClose}>Close</Button>
//           <Button variant="primary" onClick={handleSalaryUpdate}>Change</Button>
//         </Modal.Footer>
//       </Modal>
//     </>
//   )
// }

// export default AlfEachAttendance
---------------------------- ATTENDANCE PAGE END --------------------------------





---------------------------- PinMaterialReques.jsx PAGE START --------------------------------
// // here is my updated file of PinMaterialReques.jsx 
// import React, { useReducer, useRef, useState } from 'react'
// import { Col, Container, Row, FormControl, Button, Modal } from 'react-bootstrap'
// import PinSideNav from './PinSideNav'
// import PinNavihation from './PinNavihation'
// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'
// import { faL, faMinus, faPenToSquare, faPlus } from '@fortawesome/free-solid-svg-icons'

// const PinMaterialReques = () => {
  
//   const handleSearch = (e) => setSearchQuery(e.target.value.toLowerCase());

//   const [availableInventry, setAvailableInventry] = useState(
//     [
//       {inId: 10001, inName: "Cement", quant:10, unit: '', inImg:"https://res.cloudinary.com/dzysiltcv/image/upload/v1731402024/velx/cement_pxdann.jpg"},
//       {inId: 10002, inName: "M Sand", quant:0, unit: '', inImg:"https://res.cloudinary.com/dzysiltcv/image/upload/v1731402024/velx/black_sand_g5tzmg.jpg"},
//       {inId: 10003, inName: "P Sand", quant:0, unit: '', inImg:"https://res.cloudinary.com/dzysiltcv/image/upload/v1731402024/velx/black_sand_g5tzmg.jpg"},
//       {inId: 10004, inName: "River Sand", quant:0, unit: '', inImg:"https://res.cloudinary.com/dzysiltcv/image/upload/v1731402024/velx/M_Sand_bhyg8o.jpg"},
//       {inId: 10005, inName: "Gravel", quant:0, unit: '', inImg:""},
//       {inId: 10006, inName: "Slurry",quant:0, unit: '',  inImg:""},
//       {inId: 10007, inName: "Aggregate", quant:0, unit: '', inImg:""},
//       {inId: 10008, inName: "Brick", quant:0, unit: '', inImg:""},
//       {inId: 10009, inName: "Block", quant:0, unit: '', inImg:""},
//       {inId: 10010, inName: "Sheet", quant:0, unit: '', inImg:""},
//       {inId: 10011, inName: "Steel Bar", quant:0, unit: '', inImg:""},
//       {inId: 10012, inName: "Wire", quant:0, unit: '', inImg:"https://res.cloudinary.com/dzysiltcv/image/upload/v1731402575/velx/wire_rqqddx.jpg"},
//     ]
//   );

//   //create material
//   const materialNameIpRef = useRef();
//   const materialImgIpRef = useRef();
//   const materialQuantIpRef = useRef();
//   const materialUnitIpRef = useRef();
//   const [show, setShow] = useState(false);
//   const handleShow = () => setShow(true);
//   const handleClose = () => setShow(false);

//   const [editingMaterial, setEditingMaterial] = useState(null); // to edit

//   const addMaterial = () => {
//     const ipMaterialName = materialNameIpRef.current.value.trim();
//     const ipMaterialImg = materialImgIpRef.current.value.trim();
//     const ipMaterialQuant = materialQuantIpRef.current.value.trim();
//     const ipMaterialUnit = materialUnitIpRef.current.value.trim();

//     if(ipMaterialName === ""){
//       return null;
//     }

//     const newId = availableInventry.length > 0 ? Math.max(...availableInventry.map(inv => inv.inId)) + 1 : 10001;
//     const newInventry = {
//       inId : newId,
//       inName : ipMaterialName,
//       quant : ipMaterialQuant,
//       unit : ipMaterialUnit,
//       inImg : ipMaterialImg 
//     };
//     setAvailableInventry([...availableInventry, newInventry]);
//     console.log(newInventry);
//     handleClose();
//   }

//   //material request
//   const [materialRequest, setMaterialRequest] = useState([
//     {requestId: Date.now(), isApproved: false, isRejected: false, materilId:10001, materialName: "Cement", quantityToRequest:"10 packs"},
//     {requestId: Date.now() + 1, isApproved: true, isRejected: true, materilId:10002, materialName: "M Sand", quantityToRequest:"2 Units"},
//     {requestId: Date.now() + 2, isApproved: true, isRejected: false, materilId:10003, materialName: "P Sand", quantityToRequest:"3 Units"}
//   ]);
//   const [selectedMaterial, setSelectedMaterial] = useState(null);
//   const [requestModalShow, setRequestModalShow] = useState(false);
//   const reqMaterialQuantityIpRef = useRef();
//   const modalReqMaterialShow = (material) => {
//     setSelectedMaterial(material);
//     setRequestModalShow(true);
//   };

//   const addRequestCard = () => {
//     const ipReqMaterialQuantity = reqMaterialQuantityIpRef.current.value.trim();
//     if (!ipReqMaterialQuantity || !selectedMaterial) {
//       return;
//     }

//     const newRequest = {
//       requestId: Date.now(),
//       isApproved: false,
//       isRejected: false,
//       materilId: selectedMaterial.inId,
//       materialName: selectedMaterial.inName,
//       quantityToRequest: ipReqMaterialQuantity
//     };

//     setMaterialRequest([...materialRequest, newRequest]);
//     reqMaterialQuantityIpRef.current.value = "";
//     setRequestModalShow(false);
//   };

//   const requestModalClose = () => {
//     setRequestModalShow(false);
//   };

//   //material in site
//   const [materialInSite, setMaterialInSite] = useState([
//     {_id: Date.now(), name: "Cement", quantity:10, unitStr: "mootai"},
//   ]);
//   const [siteModalShow, setSiteModalShow] = useState(false);
//   const materialInSiteModalClose = () => setSiteModalShow(false);
//   const materialInSiteModalOpen = () => setSiteModalShow(true); 
//   const mNameInSiteRef = useRef();
//   const mQuantityInSiteRef = useRef();
//   const mUnitInSiteRef = useRef();

//   const addMaterialInSite = () => {
//     const ipMInSiteName = mNameInSiteRef.current.value.trim();
//     const ipMInSiteQuantity = mQuantityInSiteRef.current.value.trim();
//     const ipMInSiteUnit = mUnitInSiteRef.current.value.trim();
//     if (ipMInSiteName === "") {
//       return null;
//     }
//     const newMaterialInSite = {
//       _id : Date.now(),
//       name: ipMInSiteName,
//       quantity: ipMInSiteQuantity,
//       unitStr: ipMInSiteUnit
//     }
//     setMaterialInSite([...materialInSite, newMaterialInSite]);
//     materialInSiteModalClose()
//   }
//   // const [selectedMaterialInSite, setSelectedMaterialInSite] = useState(null);

//   const handleIncrement = (material) => {
//     setMaterialInSite((prevState) =>
//       prevState.map((item) =>
//         item._id === material._id
//           ? { ...item, quantity: parseInt(item.quantity) + 1 }
//           : item
//       )
//     );
//   };

// const handleDecrement = (material) => {
//   setMaterialInSite((prevState) =>
//     prevState.map((item) =>
//       item._id === material._id && item.quantity > 0
//         ? { ...item, quantity: parseInt(item.quantity) - 1 }
//         : item
//     )
//   );
// };


// //for search bars
// const [searchQueryInventory, setSearchQueryInventory] = useState('');
// const [searchQuerySite, setSearchQuerySite] = useState('');

// const handleSearchInventory = () => {
//   setSearchQueryInventory(searchQueryInventory.toLowerCase());
// };

// const handleSearchSite = () => {
//   setSearchQuerySite(searchQuerySite.toLowerCase());
// };

// const filteredInventory = availableInventry.filter(item =>
//   item.inName.toLowerCase().includes(searchQueryInventory)
// );

// const filteredSiteMaterials = materialInSite.filter(item =>
//   item.name.toLowerCase().includes(searchQuerySite)
// );

//   return (
//     <>
//       <Container fluid>
//         <Row>
//           <Col xs={1}>
//             <PinSideNav selectedKey="requestmaterial" />
//           </Col>
//           <Col xs={11}>
//             <PinNavihation />
//             <div className="container-fluid mt-5">
//               <div className="row">

//               <div className="col-9 search-box" style={{ display: "flex" }}>
//                                     <FormControl type="text"
//                                     placeholder="Search by Material Name"
//                                     onChange={(e) => setSearchQueryInventory(e.target.value)} />
//               </div>

//               <div className='col-1'>
//                                     <Button onClick={handleSearchInventory}>Search</Button>
//               </div>

//               <div className="col-2">
//                 <Button onClick={handleShow}>
//                   <FontAwesomeIcon icon={faPlus} /> Create Material
//                 </Button>
//               </div>


//                 <div className="col-12">
//                   <h1 className="text-center">Available Inventory</h1>
//                   <hr />
//                 </div>
//                 {filteredInventory.map((eachInventry) => (
//                   <div key={eachInventry.inId} className="col-12 col-sm-6 col-md-4 col-lg-3">
//                     <div className="inventry-catrd text-center">
//                       <img
//                         src={eachInventry.inImg}
//                         className="w-75 mt-3 mb-3"
//                         style={{ borderRadius: "50%" }}
//                         alt="Material"
//                       />
//                       <h3>{eachInventry.inName}</h3>
//                       {eachInventry.quant === 0 ? (
//                         <>
//                           <p className='text-danger'>Out Of Stock</p>
//                           <Button className="mb-3" onClick={() => modalReqMaterialShow(eachInventry)}>Force Request</Button>
//                         </>
//                       ) : (
//                         <>
//                           <p className='text-success'>{eachInventry.quant} {eachInventry.unit} Available</p>
//                           <Button className="mb-3" onClick={() => modalReqMaterialShow(eachInventry)}>Request</Button>
//                         </>
//                       )}
//                       <button className='mb-4 ml-3' style={{border:"none"}}>edit details 
//                         <FontAwesomeIcon icon={faPenToSquare} className='text-primary' style={{fontSize:"1.7em"}}/>
//                       </button>
//                     </div>
//                   </div>
//                 ))}
//                 <div className="col-12">
//                   <hr />
//                 </div>
//                 <div className="col-12">
//                   <h1 className="text-center">Material Requests</h1>
//                   <hr />
//                 </div>
//                 {materialRequest.length === 0 ? (
//                   <p>No Requests Found</p>
//                 ) : (
//                   materialRequest.map((eachRequest) => (
//                     <div key={eachRequest.requestId} className="col-12 col-sm-6 col-md-4 col-lg-3">
//                       <div className="inventry-catrd text-center p-3">
//                         <h3>{eachRequest.materialName}</h3>
//                         <p>Quantity Requested: {eachRequest.quantityToRequest}</p>
//                         {eachRequest.isRejected ? (
//                           <p className='text-danger'>Rejected</p>
//                         ) : (
//                           <>
//                             {eachRequest.isApproved ? <p className='text-success'>Approved</p> : <p className='text-danger'>Not Approved</p>}
//                           </>
//                         )}
                        
//                       </div>
//                     </div>
//                   ))
//                 )}

//                 <div className="col-12">
//                   <hr/>
//                 </div>

//                 <div className="col-12">
//                   <h1 className='text-center'>Materials in Site</h1>
//                 </div>

//                 <div className="col-12">
//                   <hr/>
//                 </div>
                
//                 <div className="col-9 search-box" style={{ display: "flex" }}>
//                                       <FormControl type="text"
//                                       placeholder="Search by Material Name"
//                                       onChange={(e) => setSearchQuerySite(e.target.value)} />
//                 </div>

//                 <div className='col-1'>
//                                       <Button onClick={handleSearchSite}>Search</Button>
//                 </div>

//                 <div className="col-2">
//                   <Button onClick={materialInSiteModalOpen}>
//                     <FontAwesomeIcon icon={faPlus} />   Add Material
//                   </Button>
//                 </div>

//                 {/* materialInSite = {_id: Date.now(), name: "Cement", quantity:10, unitStr: "moota"} */}
//                 {filteredSiteMaterials.length === 0 ? (
//                   <p>No Materials Found In the Site</p>
//                 ) : (
//                   filteredSiteMaterials.map((eachMaterial) => (
//                     <div key={eachMaterial._id} className="col-12 col-sm-6 col-md-4 col-lg-3">
//                       <div className="inventry-catrd text-center p-3">
//                         <h3>{eachMaterial.name}</h3>
//                         <div className='d-flex flex-rown justify-content-center'>
//                           <Button className='mr-3 btn btn-danger' onClick={() => handleDecrement(eachMaterial)}>
//                           < FontAwesomeIcon icon={faMinus } />
//                           </Button>
//                           <h3>{eachMaterial.quantity}</h3>
//                           <Button className='ml-3 btn btn-success' onClick={() => handleIncrement(eachMaterial)}>
//                             <FontAwesomeIcon icon={faPlus} />
//                           </Button>
//                         </div>
//                         <p>Unit : {eachMaterial.unitStr}</p>
//                       </div>
//                     </div>
//                   ))
//                 )}
//                 <div className="col-12 col-sm-6 col-md-4 col-lg-3">
                  
//                 </div>
//               </div>
//             </div>
//           </Col>
//         </Row>

//         <Modal show={show} onHide={handleClose}>
//             <Modal.Header>
//               <Modal.Title>Create Material</Modal.Title>
//             </Modal.Header>
//             <Modal.Body>
//               <label>Material Name</label>
//               <input ref={materialNameIpRef} type='text' placeholder='Material Name' className='w-100 mb-4'/>

//               <label>Image Link</label>
//               <input ref={materialImgIpRef} type='text' placeholder='Image Link' className='w-100 mb-4'/>

//               <label>Quantity</label>
//               <div>
//                 <input ref={materialQuantIpRef} type="text" placeholder='Number Of Stocks' className='w-50 mb-4'/>
//                 <input ref={materialUnitIpRef} type='text' placeholder='Units' className='w-50 mb-4'/>
//               </div>
              
//             </Modal.Body>
//             <Modal.Footer>
//               <Button variant="secondary" onClick={handleClose}>Close</Button>
//               <Button variant="primary" onClick={addMaterial}>Save</Button>
//             </Modal.Footer>
//           </Modal>


//         <Modal show={requestModalShow} onHide={requestModalClose}>
//           <Modal.Header>
//             <Modal.Title>Raise Request</Modal.Title>
//           </Modal.Header>
//           <Modal.Body>
//             <label>Enter Quantity</label>
//             <input
//               ref={reqMaterialQuantityIpRef}
//               type="text"
//               placeholder="Quantity To Request"
//               className="w-100 mb-4"
//             />
//           </Modal.Body>
//           <Modal.Footer>
//             <Button variant="secondary" onClick={requestModalClose}>Cancel Request</Button>
//             <Button variant="primary" onClick={addRequestCard}>Send Request</Button>
//           </Modal.Footer>
//         </Modal>

//         <Modal show={siteModalShow} onHide={materialInSiteModalClose}>
//           <Modal.Header>
//             <Modal.Title>Add Materials in Site</Modal.Title>
//           </Modal.Header>
//           <Modal.Body>
//             <label>Enter Material Name</label>
//             <input
//               ref={mNameInSiteRef}
//               type="text"
//               placeholder="Enter Name"
//               className="w-100 mb-4"
//             />
//             <label>Enter Quantity</label>
//             <div>

            
//               <input
//                 ref={mQuantityInSiteRef}
//                 type="text"
//                 placeholder="Enter Quantity"
//                 className="w-50 mb-4"
//               />
//               <input ref={mUnitInSiteRef} type="text" placeholder='Units' className='w-50 mb-4'/>
//             </div>
//           </Modal.Body>
//           <Modal.Footer>
//             <Button variant="secondary" onClick={materialInSiteModalClose}>Cancel</Button>
//             <Button variant="primary" onClick={addMaterialInSite}>Add Material</Button>
//           </Modal.Footer>
//         </Modal>
//       </Container>
//     </>
//   );
// };

// export default PinMaterialReques;




// // alter the code in the way on clicking "Edit details" in each card of "Available Inventory" the Modal with header "Create Material" should be poped up and the details of the particular card's data should be able to edit y
---------------------------- PinMaterialReques.jsx PAGE END --------------------------------


